
Ultrasonic-Distance-Sensor-A01NYUB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002970  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002a30  08002a30  00012a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a68  08002a68  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a68  08002a68  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a68  08002a68  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a68  08002a68  00012a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a6c  08002a6c  00012a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08002a7c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08002a7c  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008258  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000162d  00000000  00000000  0002828c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000668  00000000  00000000  000298c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005d0  00000000  00000000  00029f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f53e  00000000  00000000  0002a4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008e82  00000000  00000000  00039a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005cad3  00000000  00000000  000428b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009f38b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001510  00000000  00000000  0009f3dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002a18 	.word	0x08002a18

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002a18 	.word	0x08002a18

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <Calculations>:
 */
#include "A01NYUB.h"
#include <stdint.h>
uint8_t rxData[4];
uint32_t dist;
uint32_t Calculations(void){
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
	uint8_t checkSum = 0;
 8000226:	1cfb      	adds	r3, r7, #3
 8000228:	2200      	movs	r2, #0
 800022a:	701a      	strb	r2, [r3, #0]
	uint32_t distance = 0;
 800022c:	2300      	movs	r3, #0
 800022e:	607b      	str	r3, [r7, #4]
	checkSum = (rxData[0] + rxData[1] + rxData[2]) & 0x00FF;
 8000230:	4b14      	ldr	r3, [pc, #80]	; (8000284 <Calculations+0x64>)
 8000232:	781a      	ldrb	r2, [r3, #0]
 8000234:	4b13      	ldr	r3, [pc, #76]	; (8000284 <Calculations+0x64>)
 8000236:	785b      	ldrb	r3, [r3, #1]
 8000238:	18d3      	adds	r3, r2, r3
 800023a:	b2d9      	uxtb	r1, r3
 800023c:	4b11      	ldr	r3, [pc, #68]	; (8000284 <Calculations+0x64>)
 800023e:	789a      	ldrb	r2, [r3, #2]
 8000240:	1cfb      	adds	r3, r7, #3
 8000242:	188a      	adds	r2, r1, r2
 8000244:	701a      	strb	r2, [r3, #0]
	if(checkSum == rxData[3]){
 8000246:	4b0f      	ldr	r3, [pc, #60]	; (8000284 <Calculations+0x64>)
 8000248:	78db      	ldrb	r3, [r3, #3]
 800024a:	1cfa      	adds	r2, r7, #3
 800024c:	7812      	ldrb	r2, [r2, #0]
 800024e:	429a      	cmp	r2, r3
 8000250:	d113      	bne.n	800027a <Calculations+0x5a>
	distance = (rxData[1] << 8) + (rxData[2]);
 8000252:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <Calculations+0x64>)
 8000254:	785b      	ldrb	r3, [r3, #1]
 8000256:	021b      	lsls	r3, r3, #8
 8000258:	4a0a      	ldr	r2, [pc, #40]	; (8000284 <Calculations+0x64>)
 800025a:	7892      	ldrb	r2, [r2, #2]
 800025c:	189b      	adds	r3, r3, r2
 800025e:	607b      	str	r3, [r7, #4]
	if(distance < 280) distance = 0;
 8000260:	687a      	ldr	r2, [r7, #4]
 8000262:	238c      	movs	r3, #140	; 0x8c
 8000264:	005b      	lsls	r3, r3, #1
 8000266:	429a      	cmp	r2, r3
 8000268:	d201      	bcs.n	800026e <Calculations+0x4e>
 800026a:	2300      	movs	r3, #0
 800026c:	607b      	str	r3, [r7, #4]
	if(distance > 7500) distance = 7500;
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	4a05      	ldr	r2, [pc, #20]	; (8000288 <Calculations+0x68>)
 8000272:	4293      	cmp	r3, r2
 8000274:	d901      	bls.n	800027a <Calculations+0x5a>
 8000276:	4b04      	ldr	r3, [pc, #16]	; (8000288 <Calculations+0x68>)
 8000278:	607b      	str	r3, [r7, #4]
	}
	else{
	}
	return distance;
 800027a:	687b      	ldr	r3, [r7, #4]
}
 800027c:	0018      	movs	r0, r3
 800027e:	46bd      	mov	sp, r7
 8000280:	b002      	add	sp, #8
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000028 	.word	0x20000028
 8000288:	00001d4c 	.word	0x00001d4c

0800028c <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern uint8_t rxData[4];
extern uint32_t dist;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
	  HAL_UART_Receive_IT(&huart1, rxData, sizeof(rxData));
 8000294:	4907      	ldr	r1, [pc, #28]	; (80002b4 <HAL_UART_RxCpltCallback+0x28>)
 8000296:	4b08      	ldr	r3, [pc, #32]	; (80002b8 <HAL_UART_RxCpltCallback+0x2c>)
 8000298:	2204      	movs	r2, #4
 800029a:	0018      	movs	r0, r3
 800029c:	f001 fa7e 	bl	800179c <HAL_UART_Receive_IT>
	  dist=Calculations();
 80002a0:	f7ff ffbe 	bl	8000220 <Calculations>
 80002a4:	0002      	movs	r2, r0
 80002a6:	4b05      	ldr	r3, [pc, #20]	; (80002bc <HAL_UART_RxCpltCallback+0x30>)
 80002a8:	601a      	str	r2, [r3, #0]
}
 80002aa:	46c0      	nop			; (mov r8, r8)
 80002ac:	46bd      	mov	sp, r7
 80002ae:	b002      	add	sp, #8
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	46c0      	nop			; (mov r8, r8)
 80002b4:	20000028 	.word	0x20000028
 80002b8:	20000030 	.word	0x20000030
 80002bc:	2000002c 	.word	0x2000002c

080002c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c4:	f000 f996 	bl	80005f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c8:	f000 f816 	bl	80002f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002cc:	f000 f8a6 	bl	800041c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80002d0:	f000 f874 	bl	80003bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	 HAL_UART_Receive_IT(&huart1, rxData, sizeof(rxData));
 80002d4:	4905      	ldr	r1, [pc, #20]	; (80002ec <main+0x2c>)
 80002d6:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <main+0x30>)
 80002d8:	2204      	movs	r2, #4
 80002da:	0018      	movs	r0, r3
 80002dc:	f001 fa5e 	bl	800179c <HAL_UART_Receive_IT>
 	 dist=Calculations();
 80002e0:	f7ff ff9e 	bl	8000220 <Calculations>
 80002e4:	0002      	movs	r2, r0
 80002e6:	4b03      	ldr	r3, [pc, #12]	; (80002f4 <main+0x34>)
 80002e8:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002ea:	e7fe      	b.n	80002ea <main+0x2a>
 80002ec:	20000028 	.word	0x20000028
 80002f0:	20000030 	.word	0x20000030
 80002f4:	2000002c 	.word	0x2000002c

080002f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f8:	b590      	push	{r4, r7, lr}
 80002fa:	b097      	sub	sp, #92	; 0x5c
 80002fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fe:	2428      	movs	r4, #40	; 0x28
 8000300:	193b      	adds	r3, r7, r4
 8000302:	0018      	movs	r0, r3
 8000304:	2330      	movs	r3, #48	; 0x30
 8000306:	001a      	movs	r2, r3
 8000308:	2100      	movs	r1, #0
 800030a:	f002 fb7d 	bl	8002a08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800030e:	2318      	movs	r3, #24
 8000310:	18fb      	adds	r3, r7, r3
 8000312:	0018      	movs	r0, r3
 8000314:	2310      	movs	r3, #16
 8000316:	001a      	movs	r2, r3
 8000318:	2100      	movs	r1, #0
 800031a:	f002 fb75 	bl	8002a08 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	0018      	movs	r0, r3
 8000322:	2314      	movs	r3, #20
 8000324:	001a      	movs	r2, r3
 8000326:	2100      	movs	r1, #0
 8000328:	f002 fb6e 	bl	8002a08 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800032c:	0021      	movs	r1, r4
 800032e:	187b      	adds	r3, r7, r1
 8000330:	2202      	movs	r2, #2
 8000332:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000334:	187b      	adds	r3, r7, r1
 8000336:	2201      	movs	r2, #1
 8000338:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800033a:	187b      	adds	r3, r7, r1
 800033c:	2210      	movs	r2, #16
 800033e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000340:	187b      	adds	r3, r7, r1
 8000342:	2202      	movs	r2, #2
 8000344:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000346:	187b      	adds	r3, r7, r1
 8000348:	2280      	movs	r2, #128	; 0x80
 800034a:	0212      	lsls	r2, r2, #8
 800034c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800034e:	187b      	adds	r3, r7, r1
 8000350:	2200      	movs	r2, #0
 8000352:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000354:	187b      	adds	r3, r7, r1
 8000356:	2200      	movs	r2, #0
 8000358:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800035a:	187b      	adds	r3, r7, r1
 800035c:	0018      	movs	r0, r3
 800035e:	f000 fc79 	bl	8000c54 <HAL_RCC_OscConfig>
 8000362:	1e03      	subs	r3, r0, #0
 8000364:	d001      	beq.n	800036a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000366:	f000 f871 	bl	800044c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036a:	2118      	movs	r1, #24
 800036c:	187b      	adds	r3, r7, r1
 800036e:	2207      	movs	r2, #7
 8000370:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000372:	187b      	adds	r3, r7, r1
 8000374:	2202      	movs	r2, #2
 8000376:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000378:	187b      	adds	r3, r7, r1
 800037a:	2200      	movs	r2, #0
 800037c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800037e:	187b      	adds	r3, r7, r1
 8000380:	2200      	movs	r2, #0
 8000382:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000384:	187b      	adds	r3, r7, r1
 8000386:	2100      	movs	r1, #0
 8000388:	0018      	movs	r0, r3
 800038a:	f000 ff81 	bl	8001290 <HAL_RCC_ClockConfig>
 800038e:	1e03      	subs	r3, r0, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000392:	f000 f85b 	bl	800044c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	2201      	movs	r2, #1
 800039a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	0018      	movs	r0, r3
 80003a6:	f001 f8c7 	bl	8001538 <HAL_RCCEx_PeriphCLKConfig>
 80003aa:	1e03      	subs	r3, r0, #0
 80003ac:	d001      	beq.n	80003b2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80003ae:	f000 f84d 	bl	800044c <Error_Handler>
  }
}
 80003b2:	46c0      	nop			; (mov r8, r8)
 80003b4:	46bd      	mov	sp, r7
 80003b6:	b017      	add	sp, #92	; 0x5c
 80003b8:	bd90      	pop	{r4, r7, pc}
	...

080003bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003c0:	4b14      	ldr	r3, [pc, #80]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003c2:	4a15      	ldr	r2, [pc, #84]	; (8000418 <MX_USART1_UART_Init+0x5c>)
 80003c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80003c6:	4b13      	ldr	r3, [pc, #76]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003c8:	2296      	movs	r2, #150	; 0x96
 80003ca:	0192      	lsls	r2, r2, #6
 80003cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ce:	4b11      	ldr	r3, [pc, #68]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003d4:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003da:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003dc:	2200      	movs	r2, #0
 80003de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003e0:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003e2:	220c      	movs	r2, #12
 80003e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003e6:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003ec:	4b09      	ldr	r3, [pc, #36]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003f2:	4b08      	ldr	r3, [pc, #32]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003f8:	4b06      	ldr	r3, [pc, #24]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003fe:	4b05      	ldr	r3, [pc, #20]	; (8000414 <MX_USART1_UART_Init+0x58>)
 8000400:	0018      	movs	r0, r3
 8000402:	f001 f977 	bl	80016f4 <HAL_UART_Init>
 8000406:	1e03      	subs	r3, r0, #0
 8000408:	d001      	beq.n	800040e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800040a:	f000 f81f 	bl	800044c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20000030 	.word	0x20000030
 8000418:	40013800 	.word	0x40013800

0800041c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000422:	4b09      	ldr	r3, [pc, #36]	; (8000448 <MX_GPIO_Init+0x2c>)
 8000424:	695a      	ldr	r2, [r3, #20]
 8000426:	4b08      	ldr	r3, [pc, #32]	; (8000448 <MX_GPIO_Init+0x2c>)
 8000428:	2180      	movs	r1, #128	; 0x80
 800042a:	0289      	lsls	r1, r1, #10
 800042c:	430a      	orrs	r2, r1
 800042e:	615a      	str	r2, [r3, #20]
 8000430:	4b05      	ldr	r3, [pc, #20]	; (8000448 <MX_GPIO_Init+0x2c>)
 8000432:	695a      	ldr	r2, [r3, #20]
 8000434:	2380      	movs	r3, #128	; 0x80
 8000436:	029b      	lsls	r3, r3, #10
 8000438:	4013      	ands	r3, r2
 800043a:	607b      	str	r3, [r7, #4]
 800043c:	687b      	ldr	r3, [r7, #4]

}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	46bd      	mov	sp, r7
 8000442:	b002      	add	sp, #8
 8000444:	bd80      	pop	{r7, pc}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	40021000 	.word	0x40021000

0800044c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000450:	b672      	cpsid	i
}
 8000452:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000454:	e7fe      	b.n	8000454 <Error_Handler+0x8>
	...

08000458 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800045e:	4b0f      	ldr	r3, [pc, #60]	; (800049c <HAL_MspInit+0x44>)
 8000460:	699a      	ldr	r2, [r3, #24]
 8000462:	4b0e      	ldr	r3, [pc, #56]	; (800049c <HAL_MspInit+0x44>)
 8000464:	2101      	movs	r1, #1
 8000466:	430a      	orrs	r2, r1
 8000468:	619a      	str	r2, [r3, #24]
 800046a:	4b0c      	ldr	r3, [pc, #48]	; (800049c <HAL_MspInit+0x44>)
 800046c:	699b      	ldr	r3, [r3, #24]
 800046e:	2201      	movs	r2, #1
 8000470:	4013      	ands	r3, r2
 8000472:	607b      	str	r3, [r7, #4]
 8000474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000476:	4b09      	ldr	r3, [pc, #36]	; (800049c <HAL_MspInit+0x44>)
 8000478:	69da      	ldr	r2, [r3, #28]
 800047a:	4b08      	ldr	r3, [pc, #32]	; (800049c <HAL_MspInit+0x44>)
 800047c:	2180      	movs	r1, #128	; 0x80
 800047e:	0549      	lsls	r1, r1, #21
 8000480:	430a      	orrs	r2, r1
 8000482:	61da      	str	r2, [r3, #28]
 8000484:	4b05      	ldr	r3, [pc, #20]	; (800049c <HAL_MspInit+0x44>)
 8000486:	69da      	ldr	r2, [r3, #28]
 8000488:	2380      	movs	r3, #128	; 0x80
 800048a:	055b      	lsls	r3, r3, #21
 800048c:	4013      	ands	r3, r2
 800048e:	603b      	str	r3, [r7, #0]
 8000490:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	46bd      	mov	sp, r7
 8000496:	b002      	add	sp, #8
 8000498:	bd80      	pop	{r7, pc}
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	40021000 	.word	0x40021000

080004a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004a0:	b590      	push	{r4, r7, lr}
 80004a2:	b08b      	sub	sp, #44	; 0x2c
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a8:	2414      	movs	r4, #20
 80004aa:	193b      	adds	r3, r7, r4
 80004ac:	0018      	movs	r0, r3
 80004ae:	2314      	movs	r3, #20
 80004b0:	001a      	movs	r2, r3
 80004b2:	2100      	movs	r1, #0
 80004b4:	f002 faa8 	bl	8002a08 <memset>
  if(huart->Instance==USART1)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a21      	ldr	r2, [pc, #132]	; (8000544 <HAL_UART_MspInit+0xa4>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d13b      	bne.n	800053a <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004c2:	4b21      	ldr	r3, [pc, #132]	; (8000548 <HAL_UART_MspInit+0xa8>)
 80004c4:	699a      	ldr	r2, [r3, #24]
 80004c6:	4b20      	ldr	r3, [pc, #128]	; (8000548 <HAL_UART_MspInit+0xa8>)
 80004c8:	2180      	movs	r1, #128	; 0x80
 80004ca:	01c9      	lsls	r1, r1, #7
 80004cc:	430a      	orrs	r2, r1
 80004ce:	619a      	str	r2, [r3, #24]
 80004d0:	4b1d      	ldr	r3, [pc, #116]	; (8000548 <HAL_UART_MspInit+0xa8>)
 80004d2:	699a      	ldr	r2, [r3, #24]
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	01db      	lsls	r3, r3, #7
 80004d8:	4013      	ands	r3, r2
 80004da:	613b      	str	r3, [r7, #16]
 80004dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004de:	4b1a      	ldr	r3, [pc, #104]	; (8000548 <HAL_UART_MspInit+0xa8>)
 80004e0:	695a      	ldr	r2, [r3, #20]
 80004e2:	4b19      	ldr	r3, [pc, #100]	; (8000548 <HAL_UART_MspInit+0xa8>)
 80004e4:	2180      	movs	r1, #128	; 0x80
 80004e6:	0289      	lsls	r1, r1, #10
 80004e8:	430a      	orrs	r2, r1
 80004ea:	615a      	str	r2, [r3, #20]
 80004ec:	4b16      	ldr	r3, [pc, #88]	; (8000548 <HAL_UART_MspInit+0xa8>)
 80004ee:	695a      	ldr	r2, [r3, #20]
 80004f0:	2380      	movs	r3, #128	; 0x80
 80004f2:	029b      	lsls	r3, r3, #10
 80004f4:	4013      	ands	r3, r2
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80004fa:	193b      	adds	r3, r7, r4
 80004fc:	22c0      	movs	r2, #192	; 0xc0
 80004fe:	00d2      	lsls	r2, r2, #3
 8000500:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000502:	0021      	movs	r1, r4
 8000504:	187b      	adds	r3, r7, r1
 8000506:	2202      	movs	r2, #2
 8000508:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050a:	187b      	adds	r3, r7, r1
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000510:	187b      	adds	r3, r7, r1
 8000512:	2203      	movs	r2, #3
 8000514:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000516:	187b      	adds	r3, r7, r1
 8000518:	2201      	movs	r2, #1
 800051a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051c:	187a      	adds	r2, r7, r1
 800051e:	2390      	movs	r3, #144	; 0x90
 8000520:	05db      	lsls	r3, r3, #23
 8000522:	0011      	movs	r1, r2
 8000524:	0018      	movs	r0, r3
 8000526:	f000 fa25 	bl	8000974 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800052a:	2200      	movs	r2, #0
 800052c:	2100      	movs	r1, #0
 800052e:	201b      	movs	r0, #27
 8000530:	f000 f970 	bl	8000814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000534:	201b      	movs	r0, #27
 8000536:	f000 f982 	bl	800083e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	46bd      	mov	sp, r7
 800053e:	b00b      	add	sp, #44	; 0x2c
 8000540:	bd90      	pop	{r4, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	40013800 	.word	0x40013800
 8000548:	40021000 	.word	0x40021000

0800054c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000550:	e7fe      	b.n	8000550 <NMI_Handler+0x4>

08000552 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000552:	b580      	push	{r7, lr}
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000556:	e7fe      	b.n	8000556 <HardFault_Handler+0x4>

08000558 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800055c:	46c0      	nop			; (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}

08000562 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000562:	b580      	push	{r7, lr}
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}

0800056c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000570:	f000 f888 	bl	8000684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000574:	46c0      	nop			; (mov r8, r8)
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
	...

0800057c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000580:	4b03      	ldr	r3, [pc, #12]	; (8000590 <USART1_IRQHandler+0x14>)
 8000582:	0018      	movs	r0, r3
 8000584:	f001 f96c 	bl	8001860 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000588:	46c0      	nop			; (mov r8, r8)
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	20000030 	.word	0x20000030

08000594 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000598:	46c0      	nop			; (mov r8, r8)
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
	...

080005a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005a0:	480d      	ldr	r0, [pc, #52]	; (80005d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005a2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a4:	480d      	ldr	r0, [pc, #52]	; (80005dc <LoopForever+0x6>)
  ldr r1, =_edata
 80005a6:	490e      	ldr	r1, [pc, #56]	; (80005e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005a8:	4a0e      	ldr	r2, [pc, #56]	; (80005e4 <LoopForever+0xe>)
  movs r3, #0
 80005aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005ac:	e002      	b.n	80005b4 <LoopCopyDataInit>

080005ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005b2:	3304      	adds	r3, #4

080005b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005b8:	d3f9      	bcc.n	80005ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ba:	4a0b      	ldr	r2, [pc, #44]	; (80005e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005bc:	4c0b      	ldr	r4, [pc, #44]	; (80005ec <LoopForever+0x16>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c0:	e001      	b.n	80005c6 <LoopFillZerobss>

080005c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c4:	3204      	adds	r2, #4

080005c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005c8:	d3fb      	bcc.n	80005c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005ca:	f7ff ffe3 	bl	8000594 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80005ce:	f002 f9f7 	bl	80029c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005d2:	f7ff fe75 	bl	80002c0 <main>

080005d6 <LoopForever>:

LoopForever:
    b LoopForever
 80005d6:	e7fe      	b.n	80005d6 <LoopForever>
  ldr   r0, =_estack
 80005d8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80005dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005e4:	08002a70 	.word	0x08002a70
  ldr r2, =_sbss
 80005e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005ec:	200000b8 	.word	0x200000b8

080005f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005f0:	e7fe      	b.n	80005f0 <ADC1_IRQHandler>
	...

080005f4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <HAL_Init+0x24>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <HAL_Init+0x24>)
 80005fe:	2110      	movs	r1, #16
 8000600:	430a      	orrs	r2, r1
 8000602:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000604:	2003      	movs	r0, #3
 8000606:	f000 f809 	bl	800061c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800060a:	f7ff ff25 	bl	8000458 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800060e:	2300      	movs	r3, #0
}
 8000610:	0018      	movs	r0, r3
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	40022000 	.word	0x40022000

0800061c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000624:	4b14      	ldr	r3, [pc, #80]	; (8000678 <HAL_InitTick+0x5c>)
 8000626:	681c      	ldr	r4, [r3, #0]
 8000628:	4b14      	ldr	r3, [pc, #80]	; (800067c <HAL_InitTick+0x60>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	0019      	movs	r1, r3
 800062e:	23fa      	movs	r3, #250	; 0xfa
 8000630:	0098      	lsls	r0, r3, #2
 8000632:	f7ff fd69 	bl	8000108 <__udivsi3>
 8000636:	0003      	movs	r3, r0
 8000638:	0019      	movs	r1, r3
 800063a:	0020      	movs	r0, r4
 800063c:	f7ff fd64 	bl	8000108 <__udivsi3>
 8000640:	0003      	movs	r3, r0
 8000642:	0018      	movs	r0, r3
 8000644:	f000 f90b 	bl	800085e <HAL_SYSTICK_Config>
 8000648:	1e03      	subs	r3, r0, #0
 800064a:	d001      	beq.n	8000650 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800064c:	2301      	movs	r3, #1
 800064e:	e00f      	b.n	8000670 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2b03      	cmp	r3, #3
 8000654:	d80b      	bhi.n	800066e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000656:	6879      	ldr	r1, [r7, #4]
 8000658:	2301      	movs	r3, #1
 800065a:	425b      	negs	r3, r3
 800065c:	2200      	movs	r2, #0
 800065e:	0018      	movs	r0, r3
 8000660:	f000 f8d8 	bl	8000814 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <HAL_InitTick+0x64>)
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800066a:	2300      	movs	r3, #0
 800066c:	e000      	b.n	8000670 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800066e:	2301      	movs	r3, #1
}
 8000670:	0018      	movs	r0, r3
 8000672:	46bd      	mov	sp, r7
 8000674:	b003      	add	sp, #12
 8000676:	bd90      	pop	{r4, r7, pc}
 8000678:	20000000 	.word	0x20000000
 800067c:	20000008 	.word	0x20000008
 8000680:	20000004 	.word	0x20000004

08000684 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000688:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <HAL_IncTick+0x1c>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	001a      	movs	r2, r3
 800068e:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <HAL_IncTick+0x20>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	18d2      	adds	r2, r2, r3
 8000694:	4b03      	ldr	r3, [pc, #12]	; (80006a4 <HAL_IncTick+0x20>)
 8000696:	601a      	str	r2, [r3, #0]
}
 8000698:	46c0      	nop			; (mov r8, r8)
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	20000008 	.word	0x20000008
 80006a4:	200000b4 	.word	0x200000b4

080006a8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  return uwTick;
 80006ac:	4b02      	ldr	r3, [pc, #8]	; (80006b8 <HAL_GetTick+0x10>)
 80006ae:	681b      	ldr	r3, [r3, #0]
}
 80006b0:	0018      	movs	r0, r3
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	200000b4 	.word	0x200000b4

080006bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	0002      	movs	r2, r0
 80006c4:	1dfb      	adds	r3, r7, #7
 80006c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006c8:	1dfb      	adds	r3, r7, #7
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b7f      	cmp	r3, #127	; 0x7f
 80006ce:	d809      	bhi.n	80006e4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006d0:	1dfb      	adds	r3, r7, #7
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	001a      	movs	r2, r3
 80006d6:	231f      	movs	r3, #31
 80006d8:	401a      	ands	r2, r3
 80006da:	4b04      	ldr	r3, [pc, #16]	; (80006ec <__NVIC_EnableIRQ+0x30>)
 80006dc:	2101      	movs	r1, #1
 80006de:	4091      	lsls	r1, r2
 80006e0:	000a      	movs	r2, r1
 80006e2:	601a      	str	r2, [r3, #0]
  }
}
 80006e4:	46c0      	nop			; (mov r8, r8)
 80006e6:	46bd      	mov	sp, r7
 80006e8:	b002      	add	sp, #8
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	e000e100 	.word	0xe000e100

080006f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006f0:	b590      	push	{r4, r7, lr}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	0002      	movs	r2, r0
 80006f8:	6039      	str	r1, [r7, #0]
 80006fa:	1dfb      	adds	r3, r7, #7
 80006fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006fe:	1dfb      	adds	r3, r7, #7
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b7f      	cmp	r3, #127	; 0x7f
 8000704:	d828      	bhi.n	8000758 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000706:	4a2f      	ldr	r2, [pc, #188]	; (80007c4 <__NVIC_SetPriority+0xd4>)
 8000708:	1dfb      	adds	r3, r7, #7
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	b25b      	sxtb	r3, r3
 800070e:	089b      	lsrs	r3, r3, #2
 8000710:	33c0      	adds	r3, #192	; 0xc0
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	589b      	ldr	r3, [r3, r2]
 8000716:	1dfa      	adds	r2, r7, #7
 8000718:	7812      	ldrb	r2, [r2, #0]
 800071a:	0011      	movs	r1, r2
 800071c:	2203      	movs	r2, #3
 800071e:	400a      	ands	r2, r1
 8000720:	00d2      	lsls	r2, r2, #3
 8000722:	21ff      	movs	r1, #255	; 0xff
 8000724:	4091      	lsls	r1, r2
 8000726:	000a      	movs	r2, r1
 8000728:	43d2      	mvns	r2, r2
 800072a:	401a      	ands	r2, r3
 800072c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	019b      	lsls	r3, r3, #6
 8000732:	22ff      	movs	r2, #255	; 0xff
 8000734:	401a      	ands	r2, r3
 8000736:	1dfb      	adds	r3, r7, #7
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	0018      	movs	r0, r3
 800073c:	2303      	movs	r3, #3
 800073e:	4003      	ands	r3, r0
 8000740:	00db      	lsls	r3, r3, #3
 8000742:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000744:	481f      	ldr	r0, [pc, #124]	; (80007c4 <__NVIC_SetPriority+0xd4>)
 8000746:	1dfb      	adds	r3, r7, #7
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	b25b      	sxtb	r3, r3
 800074c:	089b      	lsrs	r3, r3, #2
 800074e:	430a      	orrs	r2, r1
 8000750:	33c0      	adds	r3, #192	; 0xc0
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000756:	e031      	b.n	80007bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000758:	4a1b      	ldr	r2, [pc, #108]	; (80007c8 <__NVIC_SetPriority+0xd8>)
 800075a:	1dfb      	adds	r3, r7, #7
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	0019      	movs	r1, r3
 8000760:	230f      	movs	r3, #15
 8000762:	400b      	ands	r3, r1
 8000764:	3b08      	subs	r3, #8
 8000766:	089b      	lsrs	r3, r3, #2
 8000768:	3306      	adds	r3, #6
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	18d3      	adds	r3, r2, r3
 800076e:	3304      	adds	r3, #4
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	1dfa      	adds	r2, r7, #7
 8000774:	7812      	ldrb	r2, [r2, #0]
 8000776:	0011      	movs	r1, r2
 8000778:	2203      	movs	r2, #3
 800077a:	400a      	ands	r2, r1
 800077c:	00d2      	lsls	r2, r2, #3
 800077e:	21ff      	movs	r1, #255	; 0xff
 8000780:	4091      	lsls	r1, r2
 8000782:	000a      	movs	r2, r1
 8000784:	43d2      	mvns	r2, r2
 8000786:	401a      	ands	r2, r3
 8000788:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	019b      	lsls	r3, r3, #6
 800078e:	22ff      	movs	r2, #255	; 0xff
 8000790:	401a      	ands	r2, r3
 8000792:	1dfb      	adds	r3, r7, #7
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	0018      	movs	r0, r3
 8000798:	2303      	movs	r3, #3
 800079a:	4003      	ands	r3, r0
 800079c:	00db      	lsls	r3, r3, #3
 800079e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007a0:	4809      	ldr	r0, [pc, #36]	; (80007c8 <__NVIC_SetPriority+0xd8>)
 80007a2:	1dfb      	adds	r3, r7, #7
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	001c      	movs	r4, r3
 80007a8:	230f      	movs	r3, #15
 80007aa:	4023      	ands	r3, r4
 80007ac:	3b08      	subs	r3, #8
 80007ae:	089b      	lsrs	r3, r3, #2
 80007b0:	430a      	orrs	r2, r1
 80007b2:	3306      	adds	r3, #6
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	18c3      	adds	r3, r0, r3
 80007b8:	3304      	adds	r3, #4
 80007ba:	601a      	str	r2, [r3, #0]
}
 80007bc:	46c0      	nop			; (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	b003      	add	sp, #12
 80007c2:	bd90      	pop	{r4, r7, pc}
 80007c4:	e000e100 	.word	0xe000e100
 80007c8:	e000ed00 	.word	0xe000ed00

080007cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	1e5a      	subs	r2, r3, #1
 80007d8:	2380      	movs	r3, #128	; 0x80
 80007da:	045b      	lsls	r3, r3, #17
 80007dc:	429a      	cmp	r2, r3
 80007de:	d301      	bcc.n	80007e4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007e0:	2301      	movs	r3, #1
 80007e2:	e010      	b.n	8000806 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007e4:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <SysTick_Config+0x44>)
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	3a01      	subs	r2, #1
 80007ea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ec:	2301      	movs	r3, #1
 80007ee:	425b      	negs	r3, r3
 80007f0:	2103      	movs	r1, #3
 80007f2:	0018      	movs	r0, r3
 80007f4:	f7ff ff7c 	bl	80006f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <SysTick_Config+0x44>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007fe:	4b04      	ldr	r3, [pc, #16]	; (8000810 <SysTick_Config+0x44>)
 8000800:	2207      	movs	r2, #7
 8000802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000804:	2300      	movs	r3, #0
}
 8000806:	0018      	movs	r0, r3
 8000808:	46bd      	mov	sp, r7
 800080a:	b002      	add	sp, #8
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	e000e010 	.word	0xe000e010

08000814 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	60b9      	str	r1, [r7, #8]
 800081c:	607a      	str	r2, [r7, #4]
 800081e:	210f      	movs	r1, #15
 8000820:	187b      	adds	r3, r7, r1
 8000822:	1c02      	adds	r2, r0, #0
 8000824:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000826:	68ba      	ldr	r2, [r7, #8]
 8000828:	187b      	adds	r3, r7, r1
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	b25b      	sxtb	r3, r3
 800082e:	0011      	movs	r1, r2
 8000830:	0018      	movs	r0, r3
 8000832:	f7ff ff5d 	bl	80006f0 <__NVIC_SetPriority>
}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	46bd      	mov	sp, r7
 800083a:	b004      	add	sp, #16
 800083c:	bd80      	pop	{r7, pc}

0800083e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
 8000844:	0002      	movs	r2, r0
 8000846:	1dfb      	adds	r3, r7, #7
 8000848:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800084a:	1dfb      	adds	r3, r7, #7
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	b25b      	sxtb	r3, r3
 8000850:	0018      	movs	r0, r3
 8000852:	f7ff ff33 	bl	80006bc <__NVIC_EnableIRQ>
}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	b002      	add	sp, #8
 800085c:	bd80      	pop	{r7, pc}

0800085e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	b082      	sub	sp, #8
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	0018      	movs	r0, r3
 800086a:	f7ff ffaf 	bl	80007cc <SysTick_Config>
 800086e:	0003      	movs	r3, r0
}
 8000870:	0018      	movs	r0, r3
 8000872:	46bd      	mov	sp, r7
 8000874:	b002      	add	sp, #8
 8000876:	bd80      	pop	{r7, pc}

08000878 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2221      	movs	r2, #33	; 0x21
 8000884:	5c9b      	ldrb	r3, [r3, r2]
 8000886:	b2db      	uxtb	r3, r3
 8000888:	2b02      	cmp	r3, #2
 800088a:	d008      	beq.n	800089e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2204      	movs	r2, #4
 8000890:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2220      	movs	r2, #32
 8000896:	2100      	movs	r1, #0
 8000898:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800089a:	2301      	movs	r3, #1
 800089c:	e020      	b.n	80008e0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	210e      	movs	r1, #14
 80008aa:	438a      	bics	r2, r1
 80008ac:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2101      	movs	r1, #1
 80008ba:	438a      	bics	r2, r1
 80008bc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008c6:	2101      	movs	r1, #1
 80008c8:	4091      	lsls	r1, r2
 80008ca:	000a      	movs	r2, r1
 80008cc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2221      	movs	r2, #33	; 0x21
 80008d2:	2101      	movs	r1, #1
 80008d4:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2220      	movs	r2, #32
 80008da:	2100      	movs	r1, #0
 80008dc:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80008de:	2300      	movs	r3, #0
}
 80008e0:	0018      	movs	r0, r3
 80008e2:	46bd      	mov	sp, r7
 80008e4:	b002      	add	sp, #8
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80008f0:	210f      	movs	r1, #15
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	2200      	movs	r2, #0
 80008f6:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2221      	movs	r2, #33	; 0x21
 80008fc:	5c9b      	ldrb	r3, [r3, r2]
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	2b02      	cmp	r3, #2
 8000902:	d006      	beq.n	8000912 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2204      	movs	r2, #4
 8000908:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800090a:	187b      	adds	r3, r7, r1
 800090c:	2201      	movs	r2, #1
 800090e:	701a      	strb	r2, [r3, #0]
 8000910:	e028      	b.n	8000964 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	210e      	movs	r1, #14
 800091e:	438a      	bics	r2, r1
 8000920:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2101      	movs	r1, #1
 800092e:	438a      	bics	r2, r1
 8000930:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800093a:	2101      	movs	r1, #1
 800093c:	4091      	lsls	r1, r2
 800093e:	000a      	movs	r2, r1
 8000940:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2221      	movs	r2, #33	; 0x21
 8000946:	2101      	movs	r1, #1
 8000948:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2220      	movs	r2, #32
 800094e:	2100      	movs	r1, #0
 8000950:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000956:	2b00      	cmp	r3, #0
 8000958:	d004      	beq.n	8000964 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	0010      	movs	r0, r2
 8000962:	4798      	blx	r3
    } 
  }
  return status;
 8000964:	230f      	movs	r3, #15
 8000966:	18fb      	adds	r3, r7, r3
 8000968:	781b      	ldrb	r3, [r3, #0]
}
 800096a:	0018      	movs	r0, r3
 800096c:	46bd      	mov	sp, r7
 800096e:	b004      	add	sp, #16
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000982:	e14f      	b.n	8000c24 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2101      	movs	r1, #1
 800098a:	697a      	ldr	r2, [r7, #20]
 800098c:	4091      	lsls	r1, r2
 800098e:	000a      	movs	r2, r1
 8000990:	4013      	ands	r3, r2
 8000992:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d100      	bne.n	800099c <HAL_GPIO_Init+0x28>
 800099a:	e140      	b.n	8000c1e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	2203      	movs	r2, #3
 80009a2:	4013      	ands	r3, r2
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d005      	beq.n	80009b4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	2203      	movs	r2, #3
 80009ae:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009b0:	2b02      	cmp	r3, #2
 80009b2:	d130      	bne.n	8000a16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	689b      	ldr	r3, [r3, #8]
 80009b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	2203      	movs	r2, #3
 80009c0:	409a      	lsls	r2, r3
 80009c2:	0013      	movs	r3, r2
 80009c4:	43da      	mvns	r2, r3
 80009c6:	693b      	ldr	r3, [r7, #16]
 80009c8:	4013      	ands	r3, r2
 80009ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	68da      	ldr	r2, [r3, #12]
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	409a      	lsls	r2, r3
 80009d6:	0013      	movs	r3, r2
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	4313      	orrs	r3, r2
 80009dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	693a      	ldr	r2, [r7, #16]
 80009e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009ea:	2201      	movs	r2, #1
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	409a      	lsls	r2, r3
 80009f0:	0013      	movs	r3, r2
 80009f2:	43da      	mvns	r2, r3
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	4013      	ands	r3, r2
 80009f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	091b      	lsrs	r3, r3, #4
 8000a00:	2201      	movs	r2, #1
 8000a02:	401a      	ands	r2, r3
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	409a      	lsls	r2, r3
 8000a08:	0013      	movs	r3, r2
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	2203      	movs	r2, #3
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	2b03      	cmp	r3, #3
 8000a20:	d017      	beq.n	8000a52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	68db      	ldr	r3, [r3, #12]
 8000a26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	409a      	lsls	r2, r3
 8000a30:	0013      	movs	r3, r2
 8000a32:	43da      	mvns	r2, r3
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	4013      	ands	r3, r2
 8000a38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	689a      	ldr	r2, [r3, #8]
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	409a      	lsls	r2, r3
 8000a44:	0013      	movs	r3, r2
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	2203      	movs	r2, #3
 8000a58:	4013      	ands	r3, r2
 8000a5a:	2b02      	cmp	r3, #2
 8000a5c:	d123      	bne.n	8000aa6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	08da      	lsrs	r2, r3, #3
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	3208      	adds	r2, #8
 8000a66:	0092      	lsls	r2, r2, #2
 8000a68:	58d3      	ldr	r3, [r2, r3]
 8000a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	2207      	movs	r2, #7
 8000a70:	4013      	ands	r3, r2
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	220f      	movs	r2, #15
 8000a76:	409a      	lsls	r2, r3
 8000a78:	0013      	movs	r3, r2
 8000a7a:	43da      	mvns	r2, r3
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	691a      	ldr	r2, [r3, #16]
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	2107      	movs	r1, #7
 8000a8a:	400b      	ands	r3, r1
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	409a      	lsls	r2, r3
 8000a90:	0013      	movs	r3, r2
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	08da      	lsrs	r2, r3, #3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3208      	adds	r2, #8
 8000aa0:	0092      	lsls	r2, r2, #2
 8000aa2:	6939      	ldr	r1, [r7, #16]
 8000aa4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	2203      	movs	r2, #3
 8000ab2:	409a      	lsls	r2, r3
 8000ab4:	0013      	movs	r3, r2
 8000ab6:	43da      	mvns	r2, r3
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	4013      	ands	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	2203      	movs	r2, #3
 8000ac4:	401a      	ands	r2, r3
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	409a      	lsls	r2, r3
 8000acc:	0013      	movs	r3, r2
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	23c0      	movs	r3, #192	; 0xc0
 8000ae0:	029b      	lsls	r3, r3, #10
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	d100      	bne.n	8000ae8 <HAL_GPIO_Init+0x174>
 8000ae6:	e09a      	b.n	8000c1e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae8:	4b54      	ldr	r3, [pc, #336]	; (8000c3c <HAL_GPIO_Init+0x2c8>)
 8000aea:	699a      	ldr	r2, [r3, #24]
 8000aec:	4b53      	ldr	r3, [pc, #332]	; (8000c3c <HAL_GPIO_Init+0x2c8>)
 8000aee:	2101      	movs	r1, #1
 8000af0:	430a      	orrs	r2, r1
 8000af2:	619a      	str	r2, [r3, #24]
 8000af4:	4b51      	ldr	r3, [pc, #324]	; (8000c3c <HAL_GPIO_Init+0x2c8>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	2201      	movs	r2, #1
 8000afa:	4013      	ands	r3, r2
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b00:	4a4f      	ldr	r2, [pc, #316]	; (8000c40 <HAL_GPIO_Init+0x2cc>)
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	089b      	lsrs	r3, r3, #2
 8000b06:	3302      	adds	r3, #2
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	589b      	ldr	r3, [r3, r2]
 8000b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	2203      	movs	r2, #3
 8000b12:	4013      	ands	r3, r2
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	220f      	movs	r2, #15
 8000b18:	409a      	lsls	r2, r3
 8000b1a:	0013      	movs	r3, r2
 8000b1c:	43da      	mvns	r2, r3
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	4013      	ands	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	2390      	movs	r3, #144	; 0x90
 8000b28:	05db      	lsls	r3, r3, #23
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d013      	beq.n	8000b56 <HAL_GPIO_Init+0x1e2>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a44      	ldr	r2, [pc, #272]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d00d      	beq.n	8000b52 <HAL_GPIO_Init+0x1de>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4a43      	ldr	r2, [pc, #268]	; (8000c48 <HAL_GPIO_Init+0x2d4>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d007      	beq.n	8000b4e <HAL_GPIO_Init+0x1da>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4a42      	ldr	r2, [pc, #264]	; (8000c4c <HAL_GPIO_Init+0x2d8>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d101      	bne.n	8000b4a <HAL_GPIO_Init+0x1d6>
 8000b46:	2303      	movs	r3, #3
 8000b48:	e006      	b.n	8000b58 <HAL_GPIO_Init+0x1e4>
 8000b4a:	2305      	movs	r3, #5
 8000b4c:	e004      	b.n	8000b58 <HAL_GPIO_Init+0x1e4>
 8000b4e:	2302      	movs	r3, #2
 8000b50:	e002      	b.n	8000b58 <HAL_GPIO_Init+0x1e4>
 8000b52:	2301      	movs	r3, #1
 8000b54:	e000      	b.n	8000b58 <HAL_GPIO_Init+0x1e4>
 8000b56:	2300      	movs	r3, #0
 8000b58:	697a      	ldr	r2, [r7, #20]
 8000b5a:	2103      	movs	r1, #3
 8000b5c:	400a      	ands	r2, r1
 8000b5e:	0092      	lsls	r2, r2, #2
 8000b60:	4093      	lsls	r3, r2
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b68:	4935      	ldr	r1, [pc, #212]	; (8000c40 <HAL_GPIO_Init+0x2cc>)
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	089b      	lsrs	r3, r3, #2
 8000b6e:	3302      	adds	r3, #2
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b76:	4b36      	ldr	r3, [pc, #216]	; (8000c50 <HAL_GPIO_Init+0x2dc>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	43da      	mvns	r2, r3
 8000b80:	693b      	ldr	r3, [r7, #16]
 8000b82:	4013      	ands	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685a      	ldr	r2, [r3, #4]
 8000b8a:	2380      	movs	r3, #128	; 0x80
 8000b8c:	025b      	lsls	r3, r3, #9
 8000b8e:	4013      	ands	r3, r2
 8000b90:	d003      	beq.n	8000b9a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b9a:	4b2d      	ldr	r3, [pc, #180]	; (8000c50 <HAL_GPIO_Init+0x2dc>)
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000ba0:	4b2b      	ldr	r3, [pc, #172]	; (8000c50 <HAL_GPIO_Init+0x2dc>)
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	43da      	mvns	r2, r3
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	4013      	ands	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685a      	ldr	r2, [r3, #4]
 8000bb4:	2380      	movs	r3, #128	; 0x80
 8000bb6:	029b      	lsls	r3, r3, #10
 8000bb8:	4013      	ands	r3, r2
 8000bba:	d003      	beq.n	8000bc4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bc4:	4b22      	ldr	r3, [pc, #136]	; (8000c50 <HAL_GPIO_Init+0x2dc>)
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bca:	4b21      	ldr	r3, [pc, #132]	; (8000c50 <HAL_GPIO_Init+0x2dc>)
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	43da      	mvns	r2, r3
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685a      	ldr	r2, [r3, #4]
 8000bde:	2380      	movs	r3, #128	; 0x80
 8000be0:	035b      	lsls	r3, r3, #13
 8000be2:	4013      	ands	r3, r2
 8000be4:	d003      	beq.n	8000bee <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bee:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <HAL_GPIO_Init+0x2dc>)
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000bf4:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <HAL_GPIO_Init+0x2dc>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	43da      	mvns	r2, r3
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	4013      	ands	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685a      	ldr	r2, [r3, #4]
 8000c08:	2380      	movs	r3, #128	; 0x80
 8000c0a:	039b      	lsls	r3, r3, #14
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	d003      	beq.n	8000c18 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c18:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <HAL_GPIO_Init+0x2dc>)
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	3301      	adds	r3, #1
 8000c22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	40da      	lsrs	r2, r3
 8000c2c:	1e13      	subs	r3, r2, #0
 8000c2e:	d000      	beq.n	8000c32 <HAL_GPIO_Init+0x2be>
 8000c30:	e6a8      	b.n	8000984 <HAL_GPIO_Init+0x10>
  } 
}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	46c0      	nop			; (mov r8, r8)
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b006      	add	sp, #24
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40010000 	.word	0x40010000
 8000c44:	48000400 	.word	0x48000400
 8000c48:	48000800 	.word	0x48000800
 8000c4c:	48000c00 	.word	0x48000c00
 8000c50:	40010400 	.word	0x40010400

08000c54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d101      	bne.n	8000c66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e305      	b.n	8001272 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	d100      	bne.n	8000c72 <HAL_RCC_OscConfig+0x1e>
 8000c70:	e08d      	b.n	8000d8e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c72:	4bc5      	ldr	r3, [pc, #788]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	220c      	movs	r2, #12
 8000c78:	4013      	ands	r3, r2
 8000c7a:	2b04      	cmp	r3, #4
 8000c7c:	d00e      	beq.n	8000c9c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c7e:	4bc2      	ldr	r3, [pc, #776]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	220c      	movs	r2, #12
 8000c84:	4013      	ands	r3, r2
 8000c86:	2b08      	cmp	r3, #8
 8000c88:	d116      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x64>
 8000c8a:	4bbf      	ldr	r3, [pc, #764]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000c8c:	685a      	ldr	r2, [r3, #4]
 8000c8e:	23c0      	movs	r3, #192	; 0xc0
 8000c90:	025b      	lsls	r3, r3, #9
 8000c92:	401a      	ands	r2, r3
 8000c94:	2380      	movs	r3, #128	; 0x80
 8000c96:	025b      	lsls	r3, r3, #9
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d10d      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c9c:	4bba      	ldr	r3, [pc, #744]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	2380      	movs	r3, #128	; 0x80
 8000ca2:	029b      	lsls	r3, r3, #10
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	d100      	bne.n	8000caa <HAL_RCC_OscConfig+0x56>
 8000ca8:	e070      	b.n	8000d8c <HAL_RCC_OscConfig+0x138>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d000      	beq.n	8000cb4 <HAL_RCC_OscConfig+0x60>
 8000cb2:	e06b      	b.n	8000d8c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e2dc      	b.n	8001272 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d107      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x7c>
 8000cc0:	4bb1      	ldr	r3, [pc, #708]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4bb0      	ldr	r3, [pc, #704]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000cc6:	2180      	movs	r1, #128	; 0x80
 8000cc8:	0249      	lsls	r1, r1, #9
 8000cca:	430a      	orrs	r2, r1
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	e02f      	b.n	8000d30 <HAL_RCC_OscConfig+0xdc>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d10c      	bne.n	8000cf2 <HAL_RCC_OscConfig+0x9e>
 8000cd8:	4bab      	ldr	r3, [pc, #684]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4baa      	ldr	r3, [pc, #680]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000cde:	49ab      	ldr	r1, [pc, #684]	; (8000f8c <HAL_RCC_OscConfig+0x338>)
 8000ce0:	400a      	ands	r2, r1
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	4ba8      	ldr	r3, [pc, #672]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4ba7      	ldr	r3, [pc, #668]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000cea:	49a9      	ldr	r1, [pc, #676]	; (8000f90 <HAL_RCC_OscConfig+0x33c>)
 8000cec:	400a      	ands	r2, r1
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	e01e      	b.n	8000d30 <HAL_RCC_OscConfig+0xdc>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	2b05      	cmp	r3, #5
 8000cf8:	d10e      	bne.n	8000d18 <HAL_RCC_OscConfig+0xc4>
 8000cfa:	4ba3      	ldr	r3, [pc, #652]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	4ba2      	ldr	r3, [pc, #648]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000d00:	2180      	movs	r1, #128	; 0x80
 8000d02:	02c9      	lsls	r1, r1, #11
 8000d04:	430a      	orrs	r2, r1
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	4b9f      	ldr	r3, [pc, #636]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b9e      	ldr	r3, [pc, #632]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000d0e:	2180      	movs	r1, #128	; 0x80
 8000d10:	0249      	lsls	r1, r1, #9
 8000d12:	430a      	orrs	r2, r1
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	e00b      	b.n	8000d30 <HAL_RCC_OscConfig+0xdc>
 8000d18:	4b9b      	ldr	r3, [pc, #620]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b9a      	ldr	r3, [pc, #616]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000d1e:	499b      	ldr	r1, [pc, #620]	; (8000f8c <HAL_RCC_OscConfig+0x338>)
 8000d20:	400a      	ands	r2, r1
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	4b98      	ldr	r3, [pc, #608]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b97      	ldr	r3, [pc, #604]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000d2a:	4999      	ldr	r1, [pc, #612]	; (8000f90 <HAL_RCC_OscConfig+0x33c>)
 8000d2c:	400a      	ands	r2, r1
 8000d2e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d014      	beq.n	8000d62 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d38:	f7ff fcb6 	bl	80006a8 <HAL_GetTick>
 8000d3c:	0003      	movs	r3, r0
 8000d3e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d40:	e008      	b.n	8000d54 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d42:	f7ff fcb1 	bl	80006a8 <HAL_GetTick>
 8000d46:	0002      	movs	r2, r0
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	2b64      	cmp	r3, #100	; 0x64
 8000d4e:	d901      	bls.n	8000d54 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000d50:	2303      	movs	r3, #3
 8000d52:	e28e      	b.n	8001272 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d54:	4b8c      	ldr	r3, [pc, #560]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	2380      	movs	r3, #128	; 0x80
 8000d5a:	029b      	lsls	r3, r3, #10
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	d0f0      	beq.n	8000d42 <HAL_RCC_OscConfig+0xee>
 8000d60:	e015      	b.n	8000d8e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d62:	f7ff fca1 	bl	80006a8 <HAL_GetTick>
 8000d66:	0003      	movs	r3, r0
 8000d68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d6a:	e008      	b.n	8000d7e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d6c:	f7ff fc9c 	bl	80006a8 <HAL_GetTick>
 8000d70:	0002      	movs	r2, r0
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b64      	cmp	r3, #100	; 0x64
 8000d78:	d901      	bls.n	8000d7e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	e279      	b.n	8001272 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d7e:	4b82      	ldr	r3, [pc, #520]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	2380      	movs	r3, #128	; 0x80
 8000d84:	029b      	lsls	r3, r3, #10
 8000d86:	4013      	ands	r3, r2
 8000d88:	d1f0      	bne.n	8000d6c <HAL_RCC_OscConfig+0x118>
 8000d8a:	e000      	b.n	8000d8e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d8c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2202      	movs	r2, #2
 8000d94:	4013      	ands	r3, r2
 8000d96:	d100      	bne.n	8000d9a <HAL_RCC_OscConfig+0x146>
 8000d98:	e06c      	b.n	8000e74 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d9a:	4b7b      	ldr	r3, [pc, #492]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	220c      	movs	r2, #12
 8000da0:	4013      	ands	r3, r2
 8000da2:	d00e      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000da4:	4b78      	ldr	r3, [pc, #480]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	220c      	movs	r2, #12
 8000daa:	4013      	ands	r3, r2
 8000dac:	2b08      	cmp	r3, #8
 8000dae:	d11f      	bne.n	8000df0 <HAL_RCC_OscConfig+0x19c>
 8000db0:	4b75      	ldr	r3, [pc, #468]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000db2:	685a      	ldr	r2, [r3, #4]
 8000db4:	23c0      	movs	r3, #192	; 0xc0
 8000db6:	025b      	lsls	r3, r3, #9
 8000db8:	401a      	ands	r2, r3
 8000dba:	2380      	movs	r3, #128	; 0x80
 8000dbc:	021b      	lsls	r3, r3, #8
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d116      	bne.n	8000df0 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dc2:	4b71      	ldr	r3, [pc, #452]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	4013      	ands	r3, r2
 8000dca:	d005      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x184>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d001      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e24c      	b.n	8001272 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dd8:	4b6b      	ldr	r3, [pc, #428]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	22f8      	movs	r2, #248	; 0xf8
 8000dde:	4393      	bics	r3, r2
 8000de0:	0019      	movs	r1, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	691b      	ldr	r3, [r3, #16]
 8000de6:	00da      	lsls	r2, r3, #3
 8000de8:	4b67      	ldr	r3, [pc, #412]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000dea:	430a      	orrs	r2, r1
 8000dec:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dee:	e041      	b.n	8000e74 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d024      	beq.n	8000e42 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000df8:	4b63      	ldr	r3, [pc, #396]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b62      	ldr	r3, [pc, #392]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000dfe:	2101      	movs	r1, #1
 8000e00:	430a      	orrs	r2, r1
 8000e02:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e04:	f7ff fc50 	bl	80006a8 <HAL_GetTick>
 8000e08:	0003      	movs	r3, r0
 8000e0a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e0c:	e008      	b.n	8000e20 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e0e:	f7ff fc4b 	bl	80006a8 <HAL_GetTick>
 8000e12:	0002      	movs	r2, r0
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d901      	bls.n	8000e20 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	e228      	b.n	8001272 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e20:	4b59      	ldr	r3, [pc, #356]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2202      	movs	r2, #2
 8000e26:	4013      	ands	r3, r2
 8000e28:	d0f1      	beq.n	8000e0e <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e2a:	4b57      	ldr	r3, [pc, #348]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	22f8      	movs	r2, #248	; 0xf8
 8000e30:	4393      	bics	r3, r2
 8000e32:	0019      	movs	r1, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	691b      	ldr	r3, [r3, #16]
 8000e38:	00da      	lsls	r2, r3, #3
 8000e3a:	4b53      	ldr	r3, [pc, #332]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	e018      	b.n	8000e74 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e42:	4b51      	ldr	r3, [pc, #324]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	4b50      	ldr	r3, [pc, #320]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000e48:	2101      	movs	r1, #1
 8000e4a:	438a      	bics	r2, r1
 8000e4c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e4e:	f7ff fc2b 	bl	80006a8 <HAL_GetTick>
 8000e52:	0003      	movs	r3, r0
 8000e54:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e56:	e008      	b.n	8000e6a <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e58:	f7ff fc26 	bl	80006a8 <HAL_GetTick>
 8000e5c:	0002      	movs	r2, r0
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d901      	bls.n	8000e6a <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8000e66:	2303      	movs	r3, #3
 8000e68:	e203      	b.n	8001272 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e6a:	4b47      	ldr	r3, [pc, #284]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2202      	movs	r2, #2
 8000e70:	4013      	ands	r3, r2
 8000e72:	d1f1      	bne.n	8000e58 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2208      	movs	r2, #8
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	d036      	beq.n	8000eec <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d019      	beq.n	8000eba <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e86:	4b40      	ldr	r3, [pc, #256]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000e88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e8a:	4b3f      	ldr	r3, [pc, #252]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e92:	f7ff fc09 	bl	80006a8 <HAL_GetTick>
 8000e96:	0003      	movs	r3, r0
 8000e98:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e9a:	e008      	b.n	8000eae <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e9c:	f7ff fc04 	bl	80006a8 <HAL_GetTick>
 8000ea0:	0002      	movs	r2, r0
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d901      	bls.n	8000eae <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e1e1      	b.n	8001272 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eae:	4b36      	ldr	r3, [pc, #216]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	d0f1      	beq.n	8000e9c <HAL_RCC_OscConfig+0x248>
 8000eb8:	e018      	b.n	8000eec <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000eba:	4b33      	ldr	r3, [pc, #204]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000ebc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ebe:	4b32      	ldr	r3, [pc, #200]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	438a      	bics	r2, r1
 8000ec4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ec6:	f7ff fbef 	bl	80006a8 <HAL_GetTick>
 8000eca:	0003      	movs	r3, r0
 8000ecc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ece:	e008      	b.n	8000ee2 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ed0:	f7ff fbea 	bl	80006a8 <HAL_GetTick>
 8000ed4:	0002      	movs	r2, r0
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d901      	bls.n	8000ee2 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e1c7      	b.n	8001272 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ee2:	4b29      	ldr	r3, [pc, #164]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	4013      	ands	r3, r2
 8000eea:	d1f1      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2204      	movs	r2, #4
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	d100      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x2a4>
 8000ef6:	e0b5      	b.n	8001064 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ef8:	201f      	movs	r0, #31
 8000efa:	183b      	adds	r3, r7, r0
 8000efc:	2200      	movs	r2, #0
 8000efe:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f00:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000f02:	69da      	ldr	r2, [r3, #28]
 8000f04:	2380      	movs	r3, #128	; 0x80
 8000f06:	055b      	lsls	r3, r3, #21
 8000f08:	4013      	ands	r3, r2
 8000f0a:	d110      	bne.n	8000f2e <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000f0e:	69da      	ldr	r2, [r3, #28]
 8000f10:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000f12:	2180      	movs	r1, #128	; 0x80
 8000f14:	0549      	lsls	r1, r1, #21
 8000f16:	430a      	orrs	r2, r1
 8000f18:	61da      	str	r2, [r3, #28]
 8000f1a:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000f1c:	69da      	ldr	r2, [r3, #28]
 8000f1e:	2380      	movs	r3, #128	; 0x80
 8000f20:	055b      	lsls	r3, r3, #21
 8000f22:	4013      	ands	r3, r2
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f28:	183b      	adds	r3, r7, r0
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f2e:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	2380      	movs	r3, #128	; 0x80
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	4013      	ands	r3, r2
 8000f38:	d11a      	bne.n	8000f70 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f3a:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000f40:	2180      	movs	r1, #128	; 0x80
 8000f42:	0049      	lsls	r1, r1, #1
 8000f44:	430a      	orrs	r2, r1
 8000f46:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f48:	f7ff fbae 	bl	80006a8 <HAL_GetTick>
 8000f4c:	0003      	movs	r3, r0
 8000f4e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f50:	e008      	b.n	8000f64 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f52:	f7ff fba9 	bl	80006a8 <HAL_GetTick>
 8000f56:	0002      	movs	r2, r0
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	2b64      	cmp	r3, #100	; 0x64
 8000f5e:	d901      	bls.n	8000f64 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8000f60:	2303      	movs	r3, #3
 8000f62:	e186      	b.n	8001272 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f64:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <HAL_RCC_OscConfig+0x340>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	2380      	movs	r3, #128	; 0x80
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	d0f0      	beq.n	8000f52 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d10f      	bne.n	8000f98 <HAL_RCC_OscConfig+0x344>
 8000f78:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000f7a:	6a1a      	ldr	r2, [r3, #32]
 8000f7c:	4b02      	ldr	r3, [pc, #8]	; (8000f88 <HAL_RCC_OscConfig+0x334>)
 8000f7e:	2101      	movs	r1, #1
 8000f80:	430a      	orrs	r2, r1
 8000f82:	621a      	str	r2, [r3, #32]
 8000f84:	e036      	b.n	8000ff4 <HAL_RCC_OscConfig+0x3a0>
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	fffeffff 	.word	0xfffeffff
 8000f90:	fffbffff 	.word	0xfffbffff
 8000f94:	40007000 	.word	0x40007000
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d10c      	bne.n	8000fba <HAL_RCC_OscConfig+0x366>
 8000fa0:	4bb6      	ldr	r3, [pc, #728]	; (800127c <HAL_RCC_OscConfig+0x628>)
 8000fa2:	6a1a      	ldr	r2, [r3, #32]
 8000fa4:	4bb5      	ldr	r3, [pc, #724]	; (800127c <HAL_RCC_OscConfig+0x628>)
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	438a      	bics	r2, r1
 8000faa:	621a      	str	r2, [r3, #32]
 8000fac:	4bb3      	ldr	r3, [pc, #716]	; (800127c <HAL_RCC_OscConfig+0x628>)
 8000fae:	6a1a      	ldr	r2, [r3, #32]
 8000fb0:	4bb2      	ldr	r3, [pc, #712]	; (800127c <HAL_RCC_OscConfig+0x628>)
 8000fb2:	2104      	movs	r1, #4
 8000fb4:	438a      	bics	r2, r1
 8000fb6:	621a      	str	r2, [r3, #32]
 8000fb8:	e01c      	b.n	8000ff4 <HAL_RCC_OscConfig+0x3a0>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	2b05      	cmp	r3, #5
 8000fc0:	d10c      	bne.n	8000fdc <HAL_RCC_OscConfig+0x388>
 8000fc2:	4bae      	ldr	r3, [pc, #696]	; (800127c <HAL_RCC_OscConfig+0x628>)
 8000fc4:	6a1a      	ldr	r2, [r3, #32]
 8000fc6:	4bad      	ldr	r3, [pc, #692]	; (800127c <HAL_RCC_OscConfig+0x628>)
 8000fc8:	2104      	movs	r1, #4
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	621a      	str	r2, [r3, #32]
 8000fce:	4bab      	ldr	r3, [pc, #684]	; (800127c <HAL_RCC_OscConfig+0x628>)
 8000fd0:	6a1a      	ldr	r2, [r3, #32]
 8000fd2:	4baa      	ldr	r3, [pc, #680]	; (800127c <HAL_RCC_OscConfig+0x628>)
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	621a      	str	r2, [r3, #32]
 8000fda:	e00b      	b.n	8000ff4 <HAL_RCC_OscConfig+0x3a0>
 8000fdc:	4ba7      	ldr	r3, [pc, #668]	; (800127c <HAL_RCC_OscConfig+0x628>)
 8000fde:	6a1a      	ldr	r2, [r3, #32]
 8000fe0:	4ba6      	ldr	r3, [pc, #664]	; (800127c <HAL_RCC_OscConfig+0x628>)
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	438a      	bics	r2, r1
 8000fe6:	621a      	str	r2, [r3, #32]
 8000fe8:	4ba4      	ldr	r3, [pc, #656]	; (800127c <HAL_RCC_OscConfig+0x628>)
 8000fea:	6a1a      	ldr	r2, [r3, #32]
 8000fec:	4ba3      	ldr	r3, [pc, #652]	; (800127c <HAL_RCC_OscConfig+0x628>)
 8000fee:	2104      	movs	r1, #4
 8000ff0:	438a      	bics	r2, r1
 8000ff2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d014      	beq.n	8001026 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ffc:	f7ff fb54 	bl	80006a8 <HAL_GetTick>
 8001000:	0003      	movs	r3, r0
 8001002:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001004:	e009      	b.n	800101a <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001006:	f7ff fb4f 	bl	80006a8 <HAL_GetTick>
 800100a:	0002      	movs	r2, r0
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	4a9b      	ldr	r2, [pc, #620]	; (8001280 <HAL_RCC_OscConfig+0x62c>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e12b      	b.n	8001272 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800101a:	4b98      	ldr	r3, [pc, #608]	; (800127c <HAL_RCC_OscConfig+0x628>)
 800101c:	6a1b      	ldr	r3, [r3, #32]
 800101e:	2202      	movs	r2, #2
 8001020:	4013      	ands	r3, r2
 8001022:	d0f0      	beq.n	8001006 <HAL_RCC_OscConfig+0x3b2>
 8001024:	e013      	b.n	800104e <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001026:	f7ff fb3f 	bl	80006a8 <HAL_GetTick>
 800102a:	0003      	movs	r3, r0
 800102c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800102e:	e009      	b.n	8001044 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001030:	f7ff fb3a 	bl	80006a8 <HAL_GetTick>
 8001034:	0002      	movs	r2, r0
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	4a91      	ldr	r2, [pc, #580]	; (8001280 <HAL_RCC_OscConfig+0x62c>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d901      	bls.n	8001044 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001040:	2303      	movs	r3, #3
 8001042:	e116      	b.n	8001272 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001044:	4b8d      	ldr	r3, [pc, #564]	; (800127c <HAL_RCC_OscConfig+0x628>)
 8001046:	6a1b      	ldr	r3, [r3, #32]
 8001048:	2202      	movs	r2, #2
 800104a:	4013      	ands	r3, r2
 800104c:	d1f0      	bne.n	8001030 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800104e:	231f      	movs	r3, #31
 8001050:	18fb      	adds	r3, r7, r3
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d105      	bne.n	8001064 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001058:	4b88      	ldr	r3, [pc, #544]	; (800127c <HAL_RCC_OscConfig+0x628>)
 800105a:	69da      	ldr	r2, [r3, #28]
 800105c:	4b87      	ldr	r3, [pc, #540]	; (800127c <HAL_RCC_OscConfig+0x628>)
 800105e:	4989      	ldr	r1, [pc, #548]	; (8001284 <HAL_RCC_OscConfig+0x630>)
 8001060:	400a      	ands	r2, r1
 8001062:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2210      	movs	r2, #16
 800106a:	4013      	ands	r3, r2
 800106c:	d063      	beq.n	8001136 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d12a      	bne.n	80010cc <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001076:	4b81      	ldr	r3, [pc, #516]	; (800127c <HAL_RCC_OscConfig+0x628>)
 8001078:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800107a:	4b80      	ldr	r3, [pc, #512]	; (800127c <HAL_RCC_OscConfig+0x628>)
 800107c:	2104      	movs	r1, #4
 800107e:	430a      	orrs	r2, r1
 8001080:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001082:	4b7e      	ldr	r3, [pc, #504]	; (800127c <HAL_RCC_OscConfig+0x628>)
 8001084:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001086:	4b7d      	ldr	r3, [pc, #500]	; (800127c <HAL_RCC_OscConfig+0x628>)
 8001088:	2101      	movs	r1, #1
 800108a:	430a      	orrs	r2, r1
 800108c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800108e:	f7ff fb0b 	bl	80006a8 <HAL_GetTick>
 8001092:	0003      	movs	r3, r0
 8001094:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001096:	e008      	b.n	80010aa <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001098:	f7ff fb06 	bl	80006a8 <HAL_GetTick>
 800109c:	0002      	movs	r2, r0
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e0e3      	b.n	8001272 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80010aa:	4b74      	ldr	r3, [pc, #464]	; (800127c <HAL_RCC_OscConfig+0x628>)
 80010ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ae:	2202      	movs	r2, #2
 80010b0:	4013      	ands	r3, r2
 80010b2:	d0f1      	beq.n	8001098 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80010b4:	4b71      	ldr	r3, [pc, #452]	; (800127c <HAL_RCC_OscConfig+0x628>)
 80010b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010b8:	22f8      	movs	r2, #248	; 0xf8
 80010ba:	4393      	bics	r3, r2
 80010bc:	0019      	movs	r1, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	00da      	lsls	r2, r3, #3
 80010c4:	4b6d      	ldr	r3, [pc, #436]	; (800127c <HAL_RCC_OscConfig+0x628>)
 80010c6:	430a      	orrs	r2, r1
 80010c8:	635a      	str	r2, [r3, #52]	; 0x34
 80010ca:	e034      	b.n	8001136 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	695b      	ldr	r3, [r3, #20]
 80010d0:	3305      	adds	r3, #5
 80010d2:	d111      	bne.n	80010f8 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80010d4:	4b69      	ldr	r3, [pc, #420]	; (800127c <HAL_RCC_OscConfig+0x628>)
 80010d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010d8:	4b68      	ldr	r3, [pc, #416]	; (800127c <HAL_RCC_OscConfig+0x628>)
 80010da:	2104      	movs	r1, #4
 80010dc:	438a      	bics	r2, r1
 80010de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80010e0:	4b66      	ldr	r3, [pc, #408]	; (800127c <HAL_RCC_OscConfig+0x628>)
 80010e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010e4:	22f8      	movs	r2, #248	; 0xf8
 80010e6:	4393      	bics	r3, r2
 80010e8:	0019      	movs	r1, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	00da      	lsls	r2, r3, #3
 80010f0:	4b62      	ldr	r3, [pc, #392]	; (800127c <HAL_RCC_OscConfig+0x628>)
 80010f2:	430a      	orrs	r2, r1
 80010f4:	635a      	str	r2, [r3, #52]	; 0x34
 80010f6:	e01e      	b.n	8001136 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010f8:	4b60      	ldr	r3, [pc, #384]	; (800127c <HAL_RCC_OscConfig+0x628>)
 80010fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010fc:	4b5f      	ldr	r3, [pc, #380]	; (800127c <HAL_RCC_OscConfig+0x628>)
 80010fe:	2104      	movs	r1, #4
 8001100:	430a      	orrs	r2, r1
 8001102:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001104:	4b5d      	ldr	r3, [pc, #372]	; (800127c <HAL_RCC_OscConfig+0x628>)
 8001106:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001108:	4b5c      	ldr	r3, [pc, #368]	; (800127c <HAL_RCC_OscConfig+0x628>)
 800110a:	2101      	movs	r1, #1
 800110c:	438a      	bics	r2, r1
 800110e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001110:	f7ff faca 	bl	80006a8 <HAL_GetTick>
 8001114:	0003      	movs	r3, r0
 8001116:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001118:	e008      	b.n	800112c <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800111a:	f7ff fac5 	bl	80006a8 <HAL_GetTick>
 800111e:	0002      	movs	r2, r0
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b02      	cmp	r3, #2
 8001126:	d901      	bls.n	800112c <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e0a2      	b.n	8001272 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800112c:	4b53      	ldr	r3, [pc, #332]	; (800127c <HAL_RCC_OscConfig+0x628>)
 800112e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001130:	2202      	movs	r2, #2
 8001132:	4013      	ands	r3, r2
 8001134:	d1f1      	bne.n	800111a <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a1b      	ldr	r3, [r3, #32]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d100      	bne.n	8001140 <HAL_RCC_OscConfig+0x4ec>
 800113e:	e097      	b.n	8001270 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001140:	4b4e      	ldr	r3, [pc, #312]	; (800127c <HAL_RCC_OscConfig+0x628>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	220c      	movs	r2, #12
 8001146:	4013      	ands	r3, r2
 8001148:	2b08      	cmp	r3, #8
 800114a:	d100      	bne.n	800114e <HAL_RCC_OscConfig+0x4fa>
 800114c:	e06b      	b.n	8001226 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a1b      	ldr	r3, [r3, #32]
 8001152:	2b02      	cmp	r3, #2
 8001154:	d14c      	bne.n	80011f0 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001156:	4b49      	ldr	r3, [pc, #292]	; (800127c <HAL_RCC_OscConfig+0x628>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	4b48      	ldr	r3, [pc, #288]	; (800127c <HAL_RCC_OscConfig+0x628>)
 800115c:	494a      	ldr	r1, [pc, #296]	; (8001288 <HAL_RCC_OscConfig+0x634>)
 800115e:	400a      	ands	r2, r1
 8001160:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001162:	f7ff faa1 	bl	80006a8 <HAL_GetTick>
 8001166:	0003      	movs	r3, r0
 8001168:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800116c:	f7ff fa9c 	bl	80006a8 <HAL_GetTick>
 8001170:	0002      	movs	r2, r0
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e079      	b.n	8001272 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800117e:	4b3f      	ldr	r3, [pc, #252]	; (800127c <HAL_RCC_OscConfig+0x628>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	2380      	movs	r3, #128	; 0x80
 8001184:	049b      	lsls	r3, r3, #18
 8001186:	4013      	ands	r3, r2
 8001188:	d1f0      	bne.n	800116c <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800118a:	4b3c      	ldr	r3, [pc, #240]	; (800127c <HAL_RCC_OscConfig+0x628>)
 800118c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800118e:	220f      	movs	r2, #15
 8001190:	4393      	bics	r3, r2
 8001192:	0019      	movs	r1, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001198:	4b38      	ldr	r3, [pc, #224]	; (800127c <HAL_RCC_OscConfig+0x628>)
 800119a:	430a      	orrs	r2, r1
 800119c:	62da      	str	r2, [r3, #44]	; 0x2c
 800119e:	4b37      	ldr	r3, [pc, #220]	; (800127c <HAL_RCC_OscConfig+0x628>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	4a3a      	ldr	r2, [pc, #232]	; (800128c <HAL_RCC_OscConfig+0x638>)
 80011a4:	4013      	ands	r3, r2
 80011a6:	0019      	movs	r1, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b0:	431a      	orrs	r2, r3
 80011b2:	4b32      	ldr	r3, [pc, #200]	; (800127c <HAL_RCC_OscConfig+0x628>)
 80011b4:	430a      	orrs	r2, r1
 80011b6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011b8:	4b30      	ldr	r3, [pc, #192]	; (800127c <HAL_RCC_OscConfig+0x628>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b2f      	ldr	r3, [pc, #188]	; (800127c <HAL_RCC_OscConfig+0x628>)
 80011be:	2180      	movs	r1, #128	; 0x80
 80011c0:	0449      	lsls	r1, r1, #17
 80011c2:	430a      	orrs	r2, r1
 80011c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c6:	f7ff fa6f 	bl	80006a8 <HAL_GetTick>
 80011ca:	0003      	movs	r3, r0
 80011cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011d0:	f7ff fa6a 	bl	80006a8 <HAL_GetTick>
 80011d4:	0002      	movs	r2, r0
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e047      	b.n	8001272 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011e2:	4b26      	ldr	r3, [pc, #152]	; (800127c <HAL_RCC_OscConfig+0x628>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	2380      	movs	r3, #128	; 0x80
 80011e8:	049b      	lsls	r3, r3, #18
 80011ea:	4013      	ands	r3, r2
 80011ec:	d0f0      	beq.n	80011d0 <HAL_RCC_OscConfig+0x57c>
 80011ee:	e03f      	b.n	8001270 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011f0:	4b22      	ldr	r3, [pc, #136]	; (800127c <HAL_RCC_OscConfig+0x628>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b21      	ldr	r3, [pc, #132]	; (800127c <HAL_RCC_OscConfig+0x628>)
 80011f6:	4924      	ldr	r1, [pc, #144]	; (8001288 <HAL_RCC_OscConfig+0x634>)
 80011f8:	400a      	ands	r2, r1
 80011fa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fc:	f7ff fa54 	bl	80006a8 <HAL_GetTick>
 8001200:	0003      	movs	r3, r0
 8001202:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001204:	e008      	b.n	8001218 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001206:	f7ff fa4f 	bl	80006a8 <HAL_GetTick>
 800120a:	0002      	movs	r2, r0
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d901      	bls.n	8001218 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e02c      	b.n	8001272 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001218:	4b18      	ldr	r3, [pc, #96]	; (800127c <HAL_RCC_OscConfig+0x628>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	2380      	movs	r3, #128	; 0x80
 800121e:	049b      	lsls	r3, r3, #18
 8001220:	4013      	ands	r3, r2
 8001222:	d1f0      	bne.n	8001206 <HAL_RCC_OscConfig+0x5b2>
 8001224:	e024      	b.n	8001270 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a1b      	ldr	r3, [r3, #32]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d101      	bne.n	8001232 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e01f      	b.n	8001272 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001232:	4b12      	ldr	r3, [pc, #72]	; (800127c <HAL_RCC_OscConfig+0x628>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001238:	4b10      	ldr	r3, [pc, #64]	; (800127c <HAL_RCC_OscConfig+0x628>)
 800123a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	23c0      	movs	r3, #192	; 0xc0
 8001242:	025b      	lsls	r3, r3, #9
 8001244:	401a      	ands	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124a:	429a      	cmp	r2, r3
 800124c:	d10e      	bne.n	800126c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	220f      	movs	r2, #15
 8001252:	401a      	ands	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001258:	429a      	cmp	r2, r3
 800125a:	d107      	bne.n	800126c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800125c:	697a      	ldr	r2, [r7, #20]
 800125e:	23f0      	movs	r3, #240	; 0xf0
 8001260:	039b      	lsls	r3, r3, #14
 8001262:	401a      	ands	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001268:	429a      	cmp	r2, r3
 800126a:	d001      	beq.n	8001270 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e000      	b.n	8001272 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	0018      	movs	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	b008      	add	sp, #32
 8001278:	bd80      	pop	{r7, pc}
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	40021000 	.word	0x40021000
 8001280:	00001388 	.word	0x00001388
 8001284:	efffffff 	.word	0xefffffff
 8001288:	feffffff 	.word	0xfeffffff
 800128c:	ffc27fff 	.word	0xffc27fff

08001290 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d101      	bne.n	80012a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e0b3      	b.n	800140c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012a4:	4b5b      	ldr	r3, [pc, #364]	; (8001414 <HAL_RCC_ClockConfig+0x184>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2201      	movs	r2, #1
 80012aa:	4013      	ands	r3, r2
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d911      	bls.n	80012d6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012b2:	4b58      	ldr	r3, [pc, #352]	; (8001414 <HAL_RCC_ClockConfig+0x184>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2201      	movs	r2, #1
 80012b8:	4393      	bics	r3, r2
 80012ba:	0019      	movs	r1, r3
 80012bc:	4b55      	ldr	r3, [pc, #340]	; (8001414 <HAL_RCC_ClockConfig+0x184>)
 80012be:	683a      	ldr	r2, [r7, #0]
 80012c0:	430a      	orrs	r2, r1
 80012c2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012c4:	4b53      	ldr	r3, [pc, #332]	; (8001414 <HAL_RCC_ClockConfig+0x184>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2201      	movs	r2, #1
 80012ca:	4013      	ands	r3, r2
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d001      	beq.n	80012d6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e09a      	b.n	800140c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2202      	movs	r2, #2
 80012dc:	4013      	ands	r3, r2
 80012de:	d015      	beq.n	800130c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2204      	movs	r2, #4
 80012e6:	4013      	ands	r3, r2
 80012e8:	d006      	beq.n	80012f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80012ea:	4b4b      	ldr	r3, [pc, #300]	; (8001418 <HAL_RCC_ClockConfig+0x188>)
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	4b4a      	ldr	r3, [pc, #296]	; (8001418 <HAL_RCC_ClockConfig+0x188>)
 80012f0:	21e0      	movs	r1, #224	; 0xe0
 80012f2:	00c9      	lsls	r1, r1, #3
 80012f4:	430a      	orrs	r2, r1
 80012f6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012f8:	4b47      	ldr	r3, [pc, #284]	; (8001418 <HAL_RCC_ClockConfig+0x188>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	22f0      	movs	r2, #240	; 0xf0
 80012fe:	4393      	bics	r3, r2
 8001300:	0019      	movs	r1, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689a      	ldr	r2, [r3, #8]
 8001306:	4b44      	ldr	r3, [pc, #272]	; (8001418 <HAL_RCC_ClockConfig+0x188>)
 8001308:	430a      	orrs	r2, r1
 800130a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2201      	movs	r2, #1
 8001312:	4013      	ands	r3, r2
 8001314:	d040      	beq.n	8001398 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d107      	bne.n	800132e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131e:	4b3e      	ldr	r3, [pc, #248]	; (8001418 <HAL_RCC_ClockConfig+0x188>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	029b      	lsls	r3, r3, #10
 8001326:	4013      	ands	r3, r2
 8001328:	d114      	bne.n	8001354 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e06e      	b.n	800140c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2b02      	cmp	r3, #2
 8001334:	d107      	bne.n	8001346 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001336:	4b38      	ldr	r3, [pc, #224]	; (8001418 <HAL_RCC_ClockConfig+0x188>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	2380      	movs	r3, #128	; 0x80
 800133c:	049b      	lsls	r3, r3, #18
 800133e:	4013      	ands	r3, r2
 8001340:	d108      	bne.n	8001354 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e062      	b.n	800140c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001346:	4b34      	ldr	r3, [pc, #208]	; (8001418 <HAL_RCC_ClockConfig+0x188>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2202      	movs	r2, #2
 800134c:	4013      	ands	r3, r2
 800134e:	d101      	bne.n	8001354 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e05b      	b.n	800140c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001354:	4b30      	ldr	r3, [pc, #192]	; (8001418 <HAL_RCC_ClockConfig+0x188>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2203      	movs	r2, #3
 800135a:	4393      	bics	r3, r2
 800135c:	0019      	movs	r1, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	4b2d      	ldr	r3, [pc, #180]	; (8001418 <HAL_RCC_ClockConfig+0x188>)
 8001364:	430a      	orrs	r2, r1
 8001366:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001368:	f7ff f99e 	bl	80006a8 <HAL_GetTick>
 800136c:	0003      	movs	r3, r0
 800136e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001370:	e009      	b.n	8001386 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001372:	f7ff f999 	bl	80006a8 <HAL_GetTick>
 8001376:	0002      	movs	r2, r0
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	4a27      	ldr	r2, [pc, #156]	; (800141c <HAL_RCC_ClockConfig+0x18c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d901      	bls.n	8001386 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e042      	b.n	800140c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001386:	4b24      	ldr	r3, [pc, #144]	; (8001418 <HAL_RCC_ClockConfig+0x188>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	220c      	movs	r2, #12
 800138c:	401a      	ands	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	429a      	cmp	r2, r3
 8001396:	d1ec      	bne.n	8001372 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001398:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <HAL_RCC_ClockConfig+0x184>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2201      	movs	r2, #1
 800139e:	4013      	ands	r3, r2
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d211      	bcs.n	80013ca <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013a6:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <HAL_RCC_ClockConfig+0x184>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2201      	movs	r2, #1
 80013ac:	4393      	bics	r3, r2
 80013ae:	0019      	movs	r1, r3
 80013b0:	4b18      	ldr	r3, [pc, #96]	; (8001414 <HAL_RCC_ClockConfig+0x184>)
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	430a      	orrs	r2, r1
 80013b6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013b8:	4b16      	ldr	r3, [pc, #88]	; (8001414 <HAL_RCC_ClockConfig+0x184>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2201      	movs	r2, #1
 80013be:	4013      	ands	r3, r2
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d001      	beq.n	80013ca <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e020      	b.n	800140c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2204      	movs	r2, #4
 80013d0:	4013      	ands	r3, r2
 80013d2:	d009      	beq.n	80013e8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80013d4:	4b10      	ldr	r3, [pc, #64]	; (8001418 <HAL_RCC_ClockConfig+0x188>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	4a11      	ldr	r2, [pc, #68]	; (8001420 <HAL_RCC_ClockConfig+0x190>)
 80013da:	4013      	ands	r3, r2
 80013dc:	0019      	movs	r1, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68da      	ldr	r2, [r3, #12]
 80013e2:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <HAL_RCC_ClockConfig+0x188>)
 80013e4:	430a      	orrs	r2, r1
 80013e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80013e8:	f000 f820 	bl	800142c <HAL_RCC_GetSysClockFreq>
 80013ec:	0001      	movs	r1, r0
 80013ee:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <HAL_RCC_ClockConfig+0x188>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	091b      	lsrs	r3, r3, #4
 80013f4:	220f      	movs	r2, #15
 80013f6:	4013      	ands	r3, r2
 80013f8:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <HAL_RCC_ClockConfig+0x194>)
 80013fa:	5cd3      	ldrb	r3, [r2, r3]
 80013fc:	000a      	movs	r2, r1
 80013fe:	40da      	lsrs	r2, r3
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <HAL_RCC_ClockConfig+0x198>)
 8001402:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001404:	2003      	movs	r0, #3
 8001406:	f7ff f909 	bl	800061c <HAL_InitTick>
  
  return HAL_OK;
 800140a:	2300      	movs	r3, #0
}
 800140c:	0018      	movs	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	b004      	add	sp, #16
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40022000 	.word	0x40022000
 8001418:	40021000 	.word	0x40021000
 800141c:	00001388 	.word	0x00001388
 8001420:	fffff8ff 	.word	0xfffff8ff
 8001424:	08002a50 	.word	0x08002a50
 8001428:	20000000 	.word	0x20000000

0800142c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800142c:	b590      	push	{r4, r7, lr}
 800142e:	b08f      	sub	sp, #60	; 0x3c
 8001430:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001432:	2314      	movs	r3, #20
 8001434:	18fb      	adds	r3, r7, r3
 8001436:	4a2c      	ldr	r2, [pc, #176]	; (80014e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001438:	ca13      	ldmia	r2!, {r0, r1, r4}
 800143a:	c313      	stmia	r3!, {r0, r1, r4}
 800143c:	6812      	ldr	r2, [r2, #0]
 800143e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	4a2a      	ldr	r2, [pc, #168]	; (80014ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8001444:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001446:	c313      	stmia	r3!, {r0, r1, r4}
 8001448:	6812      	ldr	r2, [r2, #0]
 800144a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800144c:	2300      	movs	r3, #0
 800144e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001450:	2300      	movs	r3, #0
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28
 8001454:	2300      	movs	r3, #0
 8001456:	637b      	str	r3, [r7, #52]	; 0x34
 8001458:	2300      	movs	r3, #0
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800145c:	2300      	movs	r3, #0
 800145e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001460:	4b23      	ldr	r3, [pc, #140]	; (80014f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001468:	220c      	movs	r2, #12
 800146a:	4013      	ands	r3, r2
 800146c:	2b04      	cmp	r3, #4
 800146e:	d002      	beq.n	8001476 <HAL_RCC_GetSysClockFreq+0x4a>
 8001470:	2b08      	cmp	r3, #8
 8001472:	d003      	beq.n	800147c <HAL_RCC_GetSysClockFreq+0x50>
 8001474:	e02f      	b.n	80014d6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001476:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001478:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800147a:	e02f      	b.n	80014dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800147c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800147e:	0c9b      	lsrs	r3, r3, #18
 8001480:	220f      	movs	r2, #15
 8001482:	4013      	ands	r3, r2
 8001484:	2214      	movs	r2, #20
 8001486:	18ba      	adds	r2, r7, r2
 8001488:	5cd3      	ldrb	r3, [r2, r3]
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800148c:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800148e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001490:	220f      	movs	r2, #15
 8001492:	4013      	ands	r3, r2
 8001494:	1d3a      	adds	r2, r7, #4
 8001496:	5cd3      	ldrb	r3, [r2, r3]
 8001498:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800149a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800149c:	23c0      	movs	r3, #192	; 0xc0
 800149e:	025b      	lsls	r3, r3, #9
 80014a0:	401a      	ands	r2, r3
 80014a2:	2380      	movs	r3, #128	; 0x80
 80014a4:	025b      	lsls	r3, r3, #9
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d109      	bne.n	80014be <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80014aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014ac:	4811      	ldr	r0, [pc, #68]	; (80014f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80014ae:	f7fe fe2b 	bl	8000108 <__udivsi3>
 80014b2:	0003      	movs	r3, r0
 80014b4:	001a      	movs	r2, r3
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	4353      	muls	r3, r2
 80014ba:	637b      	str	r3, [r7, #52]	; 0x34
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80014be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014c0:	480c      	ldr	r0, [pc, #48]	; (80014f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80014c2:	f7fe fe21 	bl	8000108 <__udivsi3>
 80014c6:	0003      	movs	r3, r0
 80014c8:	001a      	movs	r2, r3
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	4353      	muls	r3, r2
 80014ce:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80014d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014d4:	e002      	b.n	80014dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014d6:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80014d8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014da:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80014dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80014de:	0018      	movs	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	b00f      	add	sp, #60	; 0x3c
 80014e4:	bd90      	pop	{r4, r7, pc}
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	08002a30 	.word	0x08002a30
 80014ec:	08002a40 	.word	0x08002a40
 80014f0:	40021000 	.word	0x40021000
 80014f4:	007a1200 	.word	0x007a1200

080014f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014fc:	4b02      	ldr	r3, [pc, #8]	; (8001508 <HAL_RCC_GetHCLKFreq+0x10>)
 80014fe:	681b      	ldr	r3, [r3, #0]
}
 8001500:	0018      	movs	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	20000000 	.word	0x20000000

0800150c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001510:	f7ff fff2 	bl	80014f8 <HAL_RCC_GetHCLKFreq>
 8001514:	0001      	movs	r1, r0
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	0a1b      	lsrs	r3, r3, #8
 800151c:	2207      	movs	r2, #7
 800151e:	4013      	ands	r3, r2
 8001520:	4a04      	ldr	r2, [pc, #16]	; (8001534 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001522:	5cd3      	ldrb	r3, [r2, r3]
 8001524:	40d9      	lsrs	r1, r3
 8001526:	000b      	movs	r3, r1
}    
 8001528:	0018      	movs	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	40021000 	.word	0x40021000
 8001534:	08002a60 	.word	0x08002a60

08001538 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001540:	2300      	movs	r3, #0
 8001542:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	2380      	movs	r3, #128	; 0x80
 800154e:	025b      	lsls	r3, r3, #9
 8001550:	4013      	ands	r3, r2
 8001552:	d100      	bne.n	8001556 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001554:	e08e      	b.n	8001674 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001556:	2017      	movs	r0, #23
 8001558:	183b      	adds	r3, r7, r0
 800155a:	2200      	movs	r2, #0
 800155c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800155e:	4b5f      	ldr	r3, [pc, #380]	; (80016dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001560:	69da      	ldr	r2, [r3, #28]
 8001562:	2380      	movs	r3, #128	; 0x80
 8001564:	055b      	lsls	r3, r3, #21
 8001566:	4013      	ands	r3, r2
 8001568:	d110      	bne.n	800158c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800156a:	4b5c      	ldr	r3, [pc, #368]	; (80016dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800156c:	69da      	ldr	r2, [r3, #28]
 800156e:	4b5b      	ldr	r3, [pc, #364]	; (80016dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001570:	2180      	movs	r1, #128	; 0x80
 8001572:	0549      	lsls	r1, r1, #21
 8001574:	430a      	orrs	r2, r1
 8001576:	61da      	str	r2, [r3, #28]
 8001578:	4b58      	ldr	r3, [pc, #352]	; (80016dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800157a:	69da      	ldr	r2, [r3, #28]
 800157c:	2380      	movs	r3, #128	; 0x80
 800157e:	055b      	lsls	r3, r3, #21
 8001580:	4013      	ands	r3, r2
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001586:	183b      	adds	r3, r7, r0
 8001588:	2201      	movs	r2, #1
 800158a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158c:	4b54      	ldr	r3, [pc, #336]	; (80016e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	2380      	movs	r3, #128	; 0x80
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	4013      	ands	r3, r2
 8001596:	d11a      	bne.n	80015ce <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001598:	4b51      	ldr	r3, [pc, #324]	; (80016e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b50      	ldr	r3, [pc, #320]	; (80016e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800159e:	2180      	movs	r1, #128	; 0x80
 80015a0:	0049      	lsls	r1, r1, #1
 80015a2:	430a      	orrs	r2, r1
 80015a4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015a6:	f7ff f87f 	bl	80006a8 <HAL_GetTick>
 80015aa:	0003      	movs	r3, r0
 80015ac:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ae:	e008      	b.n	80015c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015b0:	f7ff f87a 	bl	80006a8 <HAL_GetTick>
 80015b4:	0002      	movs	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b64      	cmp	r3, #100	; 0x64
 80015bc:	d901      	bls.n	80015c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e087      	b.n	80016d2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c2:	4b47      	ldr	r3, [pc, #284]	; (80016e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	2380      	movs	r3, #128	; 0x80
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	4013      	ands	r3, r2
 80015cc:	d0f0      	beq.n	80015b0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80015ce:	4b43      	ldr	r3, [pc, #268]	; (80016dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80015d0:	6a1a      	ldr	r2, [r3, #32]
 80015d2:	23c0      	movs	r3, #192	; 0xc0
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4013      	ands	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d034      	beq.n	800164a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	23c0      	movs	r3, #192	; 0xc0
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4013      	ands	r3, r2
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d02c      	beq.n	800164a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80015f0:	4b3a      	ldr	r3, [pc, #232]	; (80016dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80015f2:	6a1b      	ldr	r3, [r3, #32]
 80015f4:	4a3b      	ldr	r2, [pc, #236]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80015f6:	4013      	ands	r3, r2
 80015f8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80015fa:	4b38      	ldr	r3, [pc, #224]	; (80016dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80015fc:	6a1a      	ldr	r2, [r3, #32]
 80015fe:	4b37      	ldr	r3, [pc, #220]	; (80016dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001600:	2180      	movs	r1, #128	; 0x80
 8001602:	0249      	lsls	r1, r1, #9
 8001604:	430a      	orrs	r2, r1
 8001606:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001608:	4b34      	ldr	r3, [pc, #208]	; (80016dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800160a:	6a1a      	ldr	r2, [r3, #32]
 800160c:	4b33      	ldr	r3, [pc, #204]	; (80016dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800160e:	4936      	ldr	r1, [pc, #216]	; (80016e8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001610:	400a      	ands	r2, r1
 8001612:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001614:	4b31      	ldr	r3, [pc, #196]	; (80016dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2201      	movs	r2, #1
 800161e:	4013      	ands	r3, r2
 8001620:	d013      	beq.n	800164a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001622:	f7ff f841 	bl	80006a8 <HAL_GetTick>
 8001626:	0003      	movs	r3, r0
 8001628:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800162a:	e009      	b.n	8001640 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800162c:	f7ff f83c 	bl	80006a8 <HAL_GetTick>
 8001630:	0002      	movs	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	4a2d      	ldr	r2, [pc, #180]	; (80016ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d901      	bls.n	8001640 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e048      	b.n	80016d2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001640:	4b26      	ldr	r3, [pc, #152]	; (80016dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	2202      	movs	r2, #2
 8001646:	4013      	ands	r3, r2
 8001648:	d0f0      	beq.n	800162c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800164a:	4b24      	ldr	r3, [pc, #144]	; (80016dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	4a25      	ldr	r2, [pc, #148]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001650:	4013      	ands	r3, r2
 8001652:	0019      	movs	r1, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	4b20      	ldr	r3, [pc, #128]	; (80016dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800165a:	430a      	orrs	r2, r1
 800165c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800165e:	2317      	movs	r3, #23
 8001660:	18fb      	adds	r3, r7, r3
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d105      	bne.n	8001674 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001668:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800166a:	69da      	ldr	r2, [r3, #28]
 800166c:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800166e:	4920      	ldr	r1, [pc, #128]	; (80016f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001670:	400a      	ands	r2, r1
 8001672:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2201      	movs	r2, #1
 800167a:	4013      	ands	r3, r2
 800167c:	d009      	beq.n	8001692 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800167e:	4b17      	ldr	r3, [pc, #92]	; (80016dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	2203      	movs	r2, #3
 8001684:	4393      	bics	r3, r2
 8001686:	0019      	movs	r1, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	4b13      	ldr	r3, [pc, #76]	; (80016dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800168e:	430a      	orrs	r2, r1
 8001690:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2220      	movs	r2, #32
 8001698:	4013      	ands	r3, r2
 800169a:	d009      	beq.n	80016b0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800169c:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800169e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a0:	2210      	movs	r2, #16
 80016a2:	4393      	bics	r3, r2
 80016a4:	0019      	movs	r1, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016ac:	430a      	orrs	r2, r1
 80016ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	2380      	movs	r3, #128	; 0x80
 80016b6:	029b      	lsls	r3, r3, #10
 80016b8:	4013      	ands	r3, r2
 80016ba:	d009      	beq.n	80016d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80016bc:	4b07      	ldr	r3, [pc, #28]	; (80016dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c0:	2280      	movs	r2, #128	; 0x80
 80016c2:	4393      	bics	r3, r2
 80016c4:	0019      	movs	r1, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	691a      	ldr	r2, [r3, #16]
 80016ca:	4b04      	ldr	r3, [pc, #16]	; (80016dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016cc:	430a      	orrs	r2, r1
 80016ce:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	0018      	movs	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b006      	add	sp, #24
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40007000 	.word	0x40007000
 80016e4:	fffffcff 	.word	0xfffffcff
 80016e8:	fffeffff 	.word	0xfffeffff
 80016ec:	00001388 	.word	0x00001388
 80016f0:	efffffff 	.word	0xefffffff

080016f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e044      	b.n	8001790 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800170a:	2b00      	cmp	r3, #0
 800170c:	d107      	bne.n	800171e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2274      	movs	r2, #116	; 0x74
 8001712:	2100      	movs	r1, #0
 8001714:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	0018      	movs	r0, r3
 800171a:	f7fe fec1 	bl	80004a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2224      	movs	r2, #36	; 0x24
 8001722:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2101      	movs	r1, #1
 8001730:	438a      	bics	r2, r1
 8001732:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	0018      	movs	r0, r3
 8001738:	f000 fb6e 	bl	8001e18 <UART_SetConfig>
 800173c:	0003      	movs	r3, r0
 800173e:	2b01      	cmp	r3, #1
 8001740:	d101      	bne.n	8001746 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e024      	b.n	8001790 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	0018      	movs	r0, r3
 8001752:	f000 fcb9 	bl	80020c8 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	490d      	ldr	r1, [pc, #52]	; (8001798 <HAL_UART_Init+0xa4>)
 8001762:	400a      	ands	r2, r1
 8001764:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2108      	movs	r1, #8
 8001772:	438a      	bics	r2, r1
 8001774:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2101      	movs	r1, #1
 8001782:	430a      	orrs	r2, r1
 8001784:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	0018      	movs	r0, r3
 800178a:	f000 fd51 	bl	8002230 <UART_CheckIdleState>
 800178e:	0003      	movs	r3, r0
}
 8001790:	0018      	movs	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	b002      	add	sp, #8
 8001796:	bd80      	pop	{r7, pc}
 8001798:	fffff7ff 	.word	0xfffff7ff

0800179c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	1dbb      	adds	r3, r7, #6
 80017a8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80017ae:	2b20      	cmp	r3, #32
 80017b0:	d150      	bne.n	8001854 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d003      	beq.n	80017c0 <HAL_UART_Receive_IT+0x24>
 80017b8:	1dbb      	adds	r3, r7, #6
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e048      	b.n	8001856 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	015b      	lsls	r3, r3, #5
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d109      	bne.n	80017e4 <HAL_UART_Receive_IT+0x48>
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d105      	bne.n	80017e4 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	2201      	movs	r2, #1
 80017dc:	4013      	ands	r3, r2
 80017de:	d001      	beq.n	80017e4 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e038      	b.n	8001856 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2274      	movs	r2, #116	; 0x74
 80017e8:	5c9b      	ldrb	r3, [r3, r2]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d101      	bne.n	80017f2 <HAL_UART_Receive_IT+0x56>
 80017ee:	2302      	movs	r3, #2
 80017f0:	e031      	b.n	8001856 <HAL_UART_Receive_IT+0xba>
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2274      	movs	r2, #116	; 0x74
 80017f6:	2101      	movs	r1, #1
 80017f8:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2200      	movs	r2, #0
 80017fe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	2380      	movs	r3, #128	; 0x80
 8001808:	041b      	lsls	r3, r3, #16
 800180a:	4013      	ands	r3, r2
 800180c:	d019      	beq.n	8001842 <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800180e:	f3ef 8310 	mrs	r3, PRIMASK
 8001812:	613b      	str	r3, [r7, #16]
  return(result);
 8001814:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001816:	61fb      	str	r3, [r7, #28]
 8001818:	2301      	movs	r3, #1
 800181a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	f383 8810 	msr	PRIMASK, r3
}
 8001822:	46c0      	nop			; (mov r8, r8)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2180      	movs	r1, #128	; 0x80
 8001830:	04c9      	lsls	r1, r1, #19
 8001832:	430a      	orrs	r2, r1
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	f383 8810 	msr	PRIMASK, r3
}
 8001840:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001842:	1dbb      	adds	r3, r7, #6
 8001844:	881a      	ldrh	r2, [r3, #0]
 8001846:	68b9      	ldr	r1, [r7, #8]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	0018      	movs	r0, r3
 800184c:	f000 fdfc 	bl	8002448 <UART_Start_Receive_IT>
 8001850:	0003      	movs	r3, r0
 8001852:	e000      	b.n	8001856 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8001854:	2302      	movs	r3, #2
  }
}
 8001856:	0018      	movs	r0, r3
 8001858:	46bd      	mov	sp, r7
 800185a:	b008      	add	sp, #32
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001860:	b590      	push	{r4, r7, lr}
 8001862:	b0ab      	sub	sp, #172	; 0xac
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	22a4      	movs	r2, #164	; 0xa4
 8001870:	18b9      	adds	r1, r7, r2
 8001872:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	20a0      	movs	r0, #160	; 0xa0
 800187c:	1839      	adds	r1, r7, r0
 800187e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	219c      	movs	r1, #156	; 0x9c
 8001888:	1879      	adds	r1, r7, r1
 800188a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800188c:	0011      	movs	r1, r2
 800188e:	18bb      	adds	r3, r7, r2
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a99      	ldr	r2, [pc, #612]	; (8001af8 <HAL_UART_IRQHandler+0x298>)
 8001894:	4013      	ands	r3, r2
 8001896:	2298      	movs	r2, #152	; 0x98
 8001898:	18bc      	adds	r4, r7, r2
 800189a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800189c:	18bb      	adds	r3, r7, r2
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d114      	bne.n	80018ce <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80018a4:	187b      	adds	r3, r7, r1
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2220      	movs	r2, #32
 80018aa:	4013      	ands	r3, r2
 80018ac:	d00f      	beq.n	80018ce <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80018ae:	183b      	adds	r3, r7, r0
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2220      	movs	r2, #32
 80018b4:	4013      	ands	r3, r2
 80018b6:	d00a      	beq.n	80018ce <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d100      	bne.n	80018c2 <HAL_UART_IRQHandler+0x62>
 80018c0:	e27e      	b.n	8001dc0 <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	0010      	movs	r0, r2
 80018ca:	4798      	blx	r3
      }
      return;
 80018cc:	e278      	b.n	8001dc0 <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80018ce:	2398      	movs	r3, #152	; 0x98
 80018d0:	18fb      	adds	r3, r7, r3
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d100      	bne.n	80018da <HAL_UART_IRQHandler+0x7a>
 80018d8:	e114      	b.n	8001b04 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80018da:	239c      	movs	r3, #156	; 0x9c
 80018dc:	18fb      	adds	r3, r7, r3
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2201      	movs	r2, #1
 80018e2:	4013      	ands	r3, r2
 80018e4:	d106      	bne.n	80018f4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80018e6:	23a0      	movs	r3, #160	; 0xa0
 80018e8:	18fb      	adds	r3, r7, r3
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a83      	ldr	r2, [pc, #524]	; (8001afc <HAL_UART_IRQHandler+0x29c>)
 80018ee:	4013      	ands	r3, r2
 80018f0:	d100      	bne.n	80018f4 <HAL_UART_IRQHandler+0x94>
 80018f2:	e107      	b.n	8001b04 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80018f4:	23a4      	movs	r3, #164	; 0xa4
 80018f6:	18fb      	adds	r3, r7, r3
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2201      	movs	r2, #1
 80018fc:	4013      	ands	r3, r2
 80018fe:	d012      	beq.n	8001926 <HAL_UART_IRQHandler+0xc6>
 8001900:	23a0      	movs	r3, #160	; 0xa0
 8001902:	18fb      	adds	r3, r7, r3
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	2380      	movs	r3, #128	; 0x80
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	4013      	ands	r3, r2
 800190c:	d00b      	beq.n	8001926 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2201      	movs	r2, #1
 8001914:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2280      	movs	r2, #128	; 0x80
 800191a:	589b      	ldr	r3, [r3, r2]
 800191c:	2201      	movs	r2, #1
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2180      	movs	r1, #128	; 0x80
 8001924:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001926:	23a4      	movs	r3, #164	; 0xa4
 8001928:	18fb      	adds	r3, r7, r3
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2202      	movs	r2, #2
 800192e:	4013      	ands	r3, r2
 8001930:	d011      	beq.n	8001956 <HAL_UART_IRQHandler+0xf6>
 8001932:	239c      	movs	r3, #156	; 0x9c
 8001934:	18fb      	adds	r3, r7, r3
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2201      	movs	r2, #1
 800193a:	4013      	ands	r3, r2
 800193c:	d00b      	beq.n	8001956 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2202      	movs	r2, #2
 8001944:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2280      	movs	r2, #128	; 0x80
 800194a:	589b      	ldr	r3, [r3, r2]
 800194c:	2204      	movs	r2, #4
 800194e:	431a      	orrs	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2180      	movs	r1, #128	; 0x80
 8001954:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001956:	23a4      	movs	r3, #164	; 0xa4
 8001958:	18fb      	adds	r3, r7, r3
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2204      	movs	r2, #4
 800195e:	4013      	ands	r3, r2
 8001960:	d011      	beq.n	8001986 <HAL_UART_IRQHandler+0x126>
 8001962:	239c      	movs	r3, #156	; 0x9c
 8001964:	18fb      	adds	r3, r7, r3
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2201      	movs	r2, #1
 800196a:	4013      	ands	r3, r2
 800196c:	d00b      	beq.n	8001986 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2204      	movs	r2, #4
 8001974:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2280      	movs	r2, #128	; 0x80
 800197a:	589b      	ldr	r3, [r3, r2]
 800197c:	2202      	movs	r2, #2
 800197e:	431a      	orrs	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2180      	movs	r1, #128	; 0x80
 8001984:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001986:	23a4      	movs	r3, #164	; 0xa4
 8001988:	18fb      	adds	r3, r7, r3
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2208      	movs	r2, #8
 800198e:	4013      	ands	r3, r2
 8001990:	d017      	beq.n	80019c2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001992:	23a0      	movs	r3, #160	; 0xa0
 8001994:	18fb      	adds	r3, r7, r3
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2220      	movs	r2, #32
 800199a:	4013      	ands	r3, r2
 800199c:	d105      	bne.n	80019aa <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800199e:	239c      	movs	r3, #156	; 0x9c
 80019a0:	18fb      	adds	r3, r7, r3
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2201      	movs	r2, #1
 80019a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80019a8:	d00b      	beq.n	80019c2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2208      	movs	r2, #8
 80019b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2280      	movs	r2, #128	; 0x80
 80019b6:	589b      	ldr	r3, [r3, r2]
 80019b8:	2208      	movs	r2, #8
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2180      	movs	r1, #128	; 0x80
 80019c0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80019c2:	23a4      	movs	r3, #164	; 0xa4
 80019c4:	18fb      	adds	r3, r7, r3
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	2380      	movs	r3, #128	; 0x80
 80019ca:	011b      	lsls	r3, r3, #4
 80019cc:	4013      	ands	r3, r2
 80019ce:	d013      	beq.n	80019f8 <HAL_UART_IRQHandler+0x198>
 80019d0:	23a0      	movs	r3, #160	; 0xa0
 80019d2:	18fb      	adds	r3, r7, r3
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	2380      	movs	r3, #128	; 0x80
 80019d8:	04db      	lsls	r3, r3, #19
 80019da:	4013      	ands	r3, r2
 80019dc:	d00c      	beq.n	80019f8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2280      	movs	r2, #128	; 0x80
 80019e4:	0112      	lsls	r2, r2, #4
 80019e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2280      	movs	r2, #128	; 0x80
 80019ec:	589b      	ldr	r3, [r3, r2]
 80019ee:	2220      	movs	r2, #32
 80019f0:	431a      	orrs	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2180      	movs	r1, #128	; 0x80
 80019f6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2280      	movs	r2, #128	; 0x80
 80019fc:	589b      	ldr	r3, [r3, r2]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d100      	bne.n	8001a04 <HAL_UART_IRQHandler+0x1a4>
 8001a02:	e1df      	b.n	8001dc4 <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001a04:	23a4      	movs	r3, #164	; 0xa4
 8001a06:	18fb      	adds	r3, r7, r3
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2220      	movs	r2, #32
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d00e      	beq.n	8001a2e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001a10:	23a0      	movs	r3, #160	; 0xa0
 8001a12:	18fb      	adds	r3, r7, r3
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2220      	movs	r2, #32
 8001a18:	4013      	ands	r3, r2
 8001a1a:	d008      	beq.n	8001a2e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d004      	beq.n	8001a2e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	0010      	movs	r0, r2
 8001a2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2280      	movs	r2, #128	; 0x80
 8001a32:	589b      	ldr	r3, [r3, r2]
 8001a34:	2194      	movs	r1, #148	; 0x94
 8001a36:	187a      	adds	r2, r7, r1
 8001a38:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	2240      	movs	r2, #64	; 0x40
 8001a42:	4013      	ands	r3, r2
 8001a44:	2b40      	cmp	r3, #64	; 0x40
 8001a46:	d004      	beq.n	8001a52 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001a48:	187b      	adds	r3, r7, r1
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2228      	movs	r2, #40	; 0x28
 8001a4e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001a50:	d047      	beq.n	8001ae2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	0018      	movs	r0, r3
 8001a56:	f000 fda7 	bl	80025a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2240      	movs	r2, #64	; 0x40
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b40      	cmp	r3, #64	; 0x40
 8001a66:	d137      	bne.n	8001ad8 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a68:	f3ef 8310 	mrs	r3, PRIMASK
 8001a6c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8001a6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001a70:	2090      	movs	r0, #144	; 0x90
 8001a72:	183a      	adds	r2, r7, r0
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	2301      	movs	r3, #1
 8001a78:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a7c:	f383 8810 	msr	PRIMASK, r3
}
 8001a80:	46c0      	nop			; (mov r8, r8)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2140      	movs	r1, #64	; 0x40
 8001a8e:	438a      	bics	r2, r1
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	183b      	adds	r3, r7, r0
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a9a:	f383 8810 	msr	PRIMASK, r3
}
 8001a9e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d012      	beq.n	8001ace <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aac:	4a14      	ldr	r2, [pc, #80]	; (8001b00 <HAL_UART_IRQHandler+0x2a0>)
 8001aae:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f7fe ff17 	bl	80008e8 <HAL_DMA_Abort_IT>
 8001aba:	1e03      	subs	r3, r0, #0
 8001abc:	d01a      	beq.n	8001af4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac8:	0018      	movs	r0, r3
 8001aca:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001acc:	e012      	b.n	8001af4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f000 f98d 	bl	8001df0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ad6:	e00d      	b.n	8001af4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	0018      	movs	r0, r3
 8001adc:	f000 f988 	bl	8001df0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ae0:	e008      	b.n	8001af4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f000 f983 	bl	8001df0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2280      	movs	r2, #128	; 0x80
 8001aee:	2100      	movs	r1, #0
 8001af0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8001af2:	e167      	b.n	8001dc4 <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001af4:	46c0      	nop			; (mov r8, r8)
    return;
 8001af6:	e165      	b.n	8001dc4 <HAL_UART_IRQHandler+0x564>
 8001af8:	0000080f 	.word	0x0000080f
 8001afc:	04000120 	.word	0x04000120
 8001b00:	0800266d 	.word	0x0800266d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d000      	beq.n	8001b0e <HAL_UART_IRQHandler+0x2ae>
 8001b0c:	e131      	b.n	8001d72 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001b0e:	23a4      	movs	r3, #164	; 0xa4
 8001b10:	18fb      	adds	r3, r7, r3
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2210      	movs	r2, #16
 8001b16:	4013      	ands	r3, r2
 8001b18:	d100      	bne.n	8001b1c <HAL_UART_IRQHandler+0x2bc>
 8001b1a:	e12a      	b.n	8001d72 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8001b1c:	23a0      	movs	r3, #160	; 0xa0
 8001b1e:	18fb      	adds	r3, r7, r3
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2210      	movs	r2, #16
 8001b24:	4013      	ands	r3, r2
 8001b26:	d100      	bne.n	8001b2a <HAL_UART_IRQHandler+0x2ca>
 8001b28:	e123      	b.n	8001d72 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2210      	movs	r2, #16
 8001b30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2240      	movs	r2, #64	; 0x40
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	2b40      	cmp	r3, #64	; 0x40
 8001b3e:	d000      	beq.n	8001b42 <HAL_UART_IRQHandler+0x2e2>
 8001b40:	e09b      	b.n	8001c7a <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	217e      	movs	r1, #126	; 0x7e
 8001b4c:	187b      	adds	r3, r7, r1
 8001b4e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8001b50:	187b      	adds	r3, r7, r1
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d100      	bne.n	8001b5a <HAL_UART_IRQHandler+0x2fa>
 8001b58:	e136      	b.n	8001dc8 <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2258      	movs	r2, #88	; 0x58
 8001b5e:	5a9b      	ldrh	r3, [r3, r2]
 8001b60:	187a      	adds	r2, r7, r1
 8001b62:	8812      	ldrh	r2, [r2, #0]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d300      	bcc.n	8001b6a <HAL_UART_IRQHandler+0x30a>
 8001b68:	e12e      	b.n	8001dc8 <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	187a      	adds	r2, r7, r1
 8001b6e:	215a      	movs	r1, #90	; 0x5a
 8001b70:	8812      	ldrh	r2, [r2, #0]
 8001b72:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	2b20      	cmp	r3, #32
 8001b7c:	d06e      	beq.n	8001c5c <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b7e:	f3ef 8310 	mrs	r3, PRIMASK
 8001b82:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8001b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001b86:	67bb      	str	r3, [r7, #120]	; 0x78
 8001b88:	2301      	movs	r3, #1
 8001b8a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b8e:	f383 8810 	msr	PRIMASK, r3
}
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	498e      	ldr	r1, [pc, #568]	; (8001dd8 <HAL_UART_IRQHandler+0x578>)
 8001ba0:	400a      	ands	r2, r1
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ba6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001baa:	f383 8810 	msr	PRIMASK, r3
}
 8001bae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bb0:	f3ef 8310 	mrs	r3, PRIMASK
 8001bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8001bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bb8:	677b      	str	r3, [r7, #116]	; 0x74
 8001bba:	2301      	movs	r3, #1
 8001bbc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bc0:	f383 8810 	msr	PRIMASK, r3
}
 8001bc4:	46c0      	nop			; (mov r8, r8)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	438a      	bics	r2, r1
 8001bd4:	609a      	str	r2, [r3, #8]
 8001bd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bd8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bdc:	f383 8810 	msr	PRIMASK, r3
}
 8001be0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001be2:	f3ef 8310 	mrs	r3, PRIMASK
 8001be6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8001be8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001bea:	673b      	str	r3, [r7, #112]	; 0x70
 8001bec:	2301      	movs	r3, #1
 8001bee:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bf2:	f383 8810 	msr	PRIMASK, r3
}
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2140      	movs	r1, #64	; 0x40
 8001c04:	438a      	bics	r2, r1
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c0a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c0e:	f383 8810 	msr	PRIMASK, r3
}
 8001c12:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2220      	movs	r2, #32
 8001c18:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c20:	f3ef 8310 	mrs	r3, PRIMASK
 8001c24:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8001c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c30:	f383 8810 	msr	PRIMASK, r3
}
 8001c34:	46c0      	nop			; (mov r8, r8)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2110      	movs	r1, #16
 8001c42:	438a      	bics	r2, r1
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c48:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c4c:	f383 8810 	msr	PRIMASK, r3
}
 8001c50:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c56:	0018      	movs	r0, r3
 8001c58:	f7fe fe0e 	bl	8000878 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2258      	movs	r2, #88	; 0x58
 8001c60:	5a9a      	ldrh	r2, [r3, r2]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	215a      	movs	r1, #90	; 0x5a
 8001c66:	5a5b      	ldrh	r3, [r3, r1]
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	0011      	movs	r1, r2
 8001c72:	0018      	movs	r0, r3
 8001c74:	f000 f8c4 	bl	8001e00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8001c78:	e0a6      	b.n	8001dc8 <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2258      	movs	r2, #88	; 0x58
 8001c7e:	5a99      	ldrh	r1, [r3, r2]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	225a      	movs	r2, #90	; 0x5a
 8001c84:	5a9b      	ldrh	r3, [r3, r2]
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	208e      	movs	r0, #142	; 0x8e
 8001c8a:	183b      	adds	r3, r7, r0
 8001c8c:	1a8a      	subs	r2, r1, r2
 8001c8e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	225a      	movs	r2, #90	; 0x5a
 8001c94:	5a9b      	ldrh	r3, [r3, r2]
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d100      	bne.n	8001c9e <HAL_UART_IRQHandler+0x43e>
 8001c9c:	e096      	b.n	8001dcc <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 8001c9e:	183b      	adds	r3, r7, r0
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d100      	bne.n	8001ca8 <HAL_UART_IRQHandler+0x448>
 8001ca6:	e091      	b.n	8001dcc <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ca8:	f3ef 8310 	mrs	r3, PRIMASK
 8001cac:	60fb      	str	r3, [r7, #12]
  return(result);
 8001cae:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001cb0:	2488      	movs	r4, #136	; 0x88
 8001cb2:	193a      	adds	r2, r7, r4
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	f383 8810 	msr	PRIMASK, r3
}
 8001cc0:	46c0      	nop			; (mov r8, r8)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4943      	ldr	r1, [pc, #268]	; (8001ddc <HAL_UART_IRQHandler+0x57c>)
 8001cce:	400a      	ands	r2, r1
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	193b      	adds	r3, r7, r4
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f383 8810 	msr	PRIMASK, r3
}
 8001cde:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ce0:	f3ef 8310 	mrs	r3, PRIMASK
 8001ce4:	61bb      	str	r3, [r7, #24]
  return(result);
 8001ce6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ce8:	2484      	movs	r4, #132	; 0x84
 8001cea:	193a      	adds	r2, r7, r4
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	2301      	movs	r3, #1
 8001cf0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	f383 8810 	msr	PRIMASK, r3
}
 8001cf8:	46c0      	nop			; (mov r8, r8)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2101      	movs	r1, #1
 8001d06:	438a      	bics	r2, r1
 8001d08:	609a      	str	r2, [r3, #8]
 8001d0a:	193b      	adds	r3, r7, r4
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	f383 8810 	msr	PRIMASK, r3
}
 8001d16:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2220      	movs	r2, #32
 8001d1c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d2a:	f3ef 8310 	mrs	r3, PRIMASK
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d32:	2480      	movs	r4, #128	; 0x80
 8001d34:	193a      	adds	r2, r7, r4
 8001d36:	6013      	str	r3, [r2, #0]
 8001d38:	2301      	movs	r3, #1
 8001d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d3e:	f383 8810 	msr	PRIMASK, r3
}
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2110      	movs	r1, #16
 8001d50:	438a      	bics	r2, r1
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	193b      	adds	r3, r7, r4
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d5c:	f383 8810 	msr	PRIMASK, r3
}
 8001d60:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001d62:	183b      	adds	r3, r7, r0
 8001d64:	881a      	ldrh	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	0011      	movs	r1, r2
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	f000 f848 	bl	8001e00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8001d70:	e02c      	b.n	8001dcc <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001d72:	23a4      	movs	r3, #164	; 0xa4
 8001d74:	18fb      	adds	r3, r7, r3
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2280      	movs	r2, #128	; 0x80
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	d00f      	beq.n	8001d9e <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001d7e:	23a0      	movs	r3, #160	; 0xa0
 8001d80:	18fb      	adds	r3, r7, r3
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2280      	movs	r2, #128	; 0x80
 8001d86:	4013      	ands	r3, r2
 8001d88:	d009      	beq.n	8001d9e <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d01e      	beq.n	8001dd0 <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	0010      	movs	r0, r2
 8001d9a:	4798      	blx	r3
    }
    return;
 8001d9c:	e018      	b.n	8001dd0 <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001d9e:	23a4      	movs	r3, #164	; 0xa4
 8001da0:	18fb      	adds	r3, r7, r3
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2240      	movs	r2, #64	; 0x40
 8001da6:	4013      	ands	r3, r2
 8001da8:	d013      	beq.n	8001dd2 <HAL_UART_IRQHandler+0x572>
 8001daa:	23a0      	movs	r3, #160	; 0xa0
 8001dac:	18fb      	adds	r3, r7, r3
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2240      	movs	r2, #64	; 0x40
 8001db2:	4013      	ands	r3, r2
 8001db4:	d00d      	beq.n	8001dd2 <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	0018      	movs	r0, r3
 8001dba:	f000 fc6e 	bl	800269a <UART_EndTransmit_IT>
    return;
 8001dbe:	e008      	b.n	8001dd2 <HAL_UART_IRQHandler+0x572>
      return;
 8001dc0:	46c0      	nop			; (mov r8, r8)
 8001dc2:	e006      	b.n	8001dd2 <HAL_UART_IRQHandler+0x572>
    return;
 8001dc4:	46c0      	nop			; (mov r8, r8)
 8001dc6:	e004      	b.n	8001dd2 <HAL_UART_IRQHandler+0x572>
      return;
 8001dc8:	46c0      	nop			; (mov r8, r8)
 8001dca:	e002      	b.n	8001dd2 <HAL_UART_IRQHandler+0x572>
      return;
 8001dcc:	46c0      	nop			; (mov r8, r8)
 8001dce:	e000      	b.n	8001dd2 <HAL_UART_IRQHandler+0x572>
    return;
 8001dd0:	46c0      	nop			; (mov r8, r8)
  }

}
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	b02b      	add	sp, #172	; 0xac
 8001dd6:	bd90      	pop	{r4, r7, pc}
 8001dd8:	fffffeff 	.word	0xfffffeff
 8001ddc:	fffffedf 	.word	0xfffffedf

08001de0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8001de8:	46c0      	nop			; (mov r8, r8)
 8001dea:	46bd      	mov	sp, r7
 8001dec:	b002      	add	sp, #8
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8001df8:	46c0      	nop			; (mov r8, r8)
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	b002      	add	sp, #8
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	000a      	movs	r2, r1
 8001e0a:	1cbb      	adds	r3, r7, #2
 8001e0c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001e0e:	46c0      	nop			; (mov r8, r8)
 8001e10:	46bd      	mov	sp, r7
 8001e12:	b002      	add	sp, #8
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b088      	sub	sp, #32
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e20:	231e      	movs	r3, #30
 8001e22:	18fb      	adds	r3, r7, r3
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	431a      	orrs	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69db      	ldr	r3, [r3, #28]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a97      	ldr	r2, [pc, #604]	; (80020a4 <UART_SetConfig+0x28c>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	0019      	movs	r1, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	4a92      	ldr	r2, [pc, #584]	; (80020a8 <UART_SetConfig+0x290>)
 8001e5e:	4013      	ands	r3, r2
 8001e60:	0019      	movs	r1, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68da      	ldr	r2, [r3, #12]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	4a89      	ldr	r2, [pc, #548]	; (80020ac <UART_SetConfig+0x294>)
 8001e86:	4013      	ands	r3, r2
 8001e88:	0019      	movs	r1, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a85      	ldr	r2, [pc, #532]	; (80020b0 <UART_SetConfig+0x298>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d127      	bne.n	8001eee <UART_SetConfig+0xd6>
 8001e9e:	4b85      	ldr	r3, [pc, #532]	; (80020b4 <UART_SetConfig+0x29c>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	2b03      	cmp	r3, #3
 8001ea8:	d00d      	beq.n	8001ec6 <UART_SetConfig+0xae>
 8001eaa:	d81b      	bhi.n	8001ee4 <UART_SetConfig+0xcc>
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d014      	beq.n	8001eda <UART_SetConfig+0xc2>
 8001eb0:	d818      	bhi.n	8001ee4 <UART_SetConfig+0xcc>
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d002      	beq.n	8001ebc <UART_SetConfig+0xa4>
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d00a      	beq.n	8001ed0 <UART_SetConfig+0xb8>
 8001eba:	e013      	b.n	8001ee4 <UART_SetConfig+0xcc>
 8001ebc:	231f      	movs	r3, #31
 8001ebe:	18fb      	adds	r3, r7, r3
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	701a      	strb	r2, [r3, #0]
 8001ec4:	e035      	b.n	8001f32 <UART_SetConfig+0x11a>
 8001ec6:	231f      	movs	r3, #31
 8001ec8:	18fb      	adds	r3, r7, r3
 8001eca:	2202      	movs	r2, #2
 8001ecc:	701a      	strb	r2, [r3, #0]
 8001ece:	e030      	b.n	8001f32 <UART_SetConfig+0x11a>
 8001ed0:	231f      	movs	r3, #31
 8001ed2:	18fb      	adds	r3, r7, r3
 8001ed4:	2204      	movs	r2, #4
 8001ed6:	701a      	strb	r2, [r3, #0]
 8001ed8:	e02b      	b.n	8001f32 <UART_SetConfig+0x11a>
 8001eda:	231f      	movs	r3, #31
 8001edc:	18fb      	adds	r3, r7, r3
 8001ede:	2208      	movs	r2, #8
 8001ee0:	701a      	strb	r2, [r3, #0]
 8001ee2:	e026      	b.n	8001f32 <UART_SetConfig+0x11a>
 8001ee4:	231f      	movs	r3, #31
 8001ee6:	18fb      	adds	r3, r7, r3
 8001ee8:	2210      	movs	r2, #16
 8001eea:	701a      	strb	r2, [r3, #0]
 8001eec:	e021      	b.n	8001f32 <UART_SetConfig+0x11a>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a71      	ldr	r2, [pc, #452]	; (80020b8 <UART_SetConfig+0x2a0>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d104      	bne.n	8001f02 <UART_SetConfig+0xea>
 8001ef8:	231f      	movs	r3, #31
 8001efa:	18fb      	adds	r3, r7, r3
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]
 8001f00:	e017      	b.n	8001f32 <UART_SetConfig+0x11a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a6d      	ldr	r2, [pc, #436]	; (80020bc <UART_SetConfig+0x2a4>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d104      	bne.n	8001f16 <UART_SetConfig+0xfe>
 8001f0c:	231f      	movs	r3, #31
 8001f0e:	18fb      	adds	r3, r7, r3
 8001f10:	2200      	movs	r2, #0
 8001f12:	701a      	strb	r2, [r3, #0]
 8001f14:	e00d      	b.n	8001f32 <UART_SetConfig+0x11a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a69      	ldr	r2, [pc, #420]	; (80020c0 <UART_SetConfig+0x2a8>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d104      	bne.n	8001f2a <UART_SetConfig+0x112>
 8001f20:	231f      	movs	r3, #31
 8001f22:	18fb      	adds	r3, r7, r3
 8001f24:	2200      	movs	r2, #0
 8001f26:	701a      	strb	r2, [r3, #0]
 8001f28:	e003      	b.n	8001f32 <UART_SetConfig+0x11a>
 8001f2a:	231f      	movs	r3, #31
 8001f2c:	18fb      	adds	r3, r7, r3
 8001f2e:	2210      	movs	r2, #16
 8001f30:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69da      	ldr	r2, [r3, #28]
 8001f36:	2380      	movs	r3, #128	; 0x80
 8001f38:	021b      	lsls	r3, r3, #8
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d15d      	bne.n	8001ffa <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 8001f3e:	231f      	movs	r3, #31
 8001f40:	18fb      	adds	r3, r7, r3
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d015      	beq.n	8001f74 <UART_SetConfig+0x15c>
 8001f48:	dc18      	bgt.n	8001f7c <UART_SetConfig+0x164>
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	d00d      	beq.n	8001f6a <UART_SetConfig+0x152>
 8001f4e:	dc15      	bgt.n	8001f7c <UART_SetConfig+0x164>
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d002      	beq.n	8001f5a <UART_SetConfig+0x142>
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d005      	beq.n	8001f64 <UART_SetConfig+0x14c>
 8001f58:	e010      	b.n	8001f7c <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f5a:	f7ff fad7 	bl	800150c <HAL_RCC_GetPCLK1Freq>
 8001f5e:	0003      	movs	r3, r0
 8001f60:	61bb      	str	r3, [r7, #24]
        break;
 8001f62:	e012      	b.n	8001f8a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001f64:	4b57      	ldr	r3, [pc, #348]	; (80020c4 <UART_SetConfig+0x2ac>)
 8001f66:	61bb      	str	r3, [r7, #24]
        break;
 8001f68:	e00f      	b.n	8001f8a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001f6a:	f7ff fa5f 	bl	800142c <HAL_RCC_GetSysClockFreq>
 8001f6e:	0003      	movs	r3, r0
 8001f70:	61bb      	str	r3, [r7, #24]
        break;
 8001f72:	e00a      	b.n	8001f8a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	021b      	lsls	r3, r3, #8
 8001f78:	61bb      	str	r3, [r7, #24]
        break;
 8001f7a:	e006      	b.n	8001f8a <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001f80:	231e      	movs	r3, #30
 8001f82:	18fb      	adds	r3, r7, r3
 8001f84:	2201      	movs	r2, #1
 8001f86:	701a      	strb	r2, [r3, #0]
        break;
 8001f88:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d100      	bne.n	8001f92 <UART_SetConfig+0x17a>
 8001f90:	e07b      	b.n	800208a <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	005a      	lsls	r2, r3, #1
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	085b      	lsrs	r3, r3, #1
 8001f9c:	18d2      	adds	r2, r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	0019      	movs	r1, r3
 8001fa4:	0010      	movs	r0, r2
 8001fa6:	f7fe f8af 	bl	8000108 <__udivsi3>
 8001faa:	0003      	movs	r3, r0
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	2b0f      	cmp	r3, #15
 8001fb4:	d91c      	bls.n	8001ff0 <UART_SetConfig+0x1d8>
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	2380      	movs	r3, #128	; 0x80
 8001fba:	025b      	lsls	r3, r3, #9
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d217      	bcs.n	8001ff0 <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	200e      	movs	r0, #14
 8001fc6:	183b      	adds	r3, r7, r0
 8001fc8:	210f      	movs	r1, #15
 8001fca:	438a      	bics	r2, r1
 8001fcc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	085b      	lsrs	r3, r3, #1
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	2207      	movs	r2, #7
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	b299      	uxth	r1, r3
 8001fda:	183b      	adds	r3, r7, r0
 8001fdc:	183a      	adds	r2, r7, r0
 8001fde:	8812      	ldrh	r2, [r2, #0]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	183a      	adds	r2, r7, r0
 8001fea:	8812      	ldrh	r2, [r2, #0]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	e04c      	b.n	800208a <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8001ff0:	231e      	movs	r3, #30
 8001ff2:	18fb      	adds	r3, r7, r3
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	701a      	strb	r2, [r3, #0]
 8001ff8:	e047      	b.n	800208a <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001ffa:	231f      	movs	r3, #31
 8001ffc:	18fb      	adds	r3, r7, r3
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b08      	cmp	r3, #8
 8002002:	d015      	beq.n	8002030 <UART_SetConfig+0x218>
 8002004:	dc18      	bgt.n	8002038 <UART_SetConfig+0x220>
 8002006:	2b04      	cmp	r3, #4
 8002008:	d00d      	beq.n	8002026 <UART_SetConfig+0x20e>
 800200a:	dc15      	bgt.n	8002038 <UART_SetConfig+0x220>
 800200c:	2b00      	cmp	r3, #0
 800200e:	d002      	beq.n	8002016 <UART_SetConfig+0x1fe>
 8002010:	2b02      	cmp	r3, #2
 8002012:	d005      	beq.n	8002020 <UART_SetConfig+0x208>
 8002014:	e010      	b.n	8002038 <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002016:	f7ff fa79 	bl	800150c <HAL_RCC_GetPCLK1Freq>
 800201a:	0003      	movs	r3, r0
 800201c:	61bb      	str	r3, [r7, #24]
        break;
 800201e:	e012      	b.n	8002046 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002020:	4b28      	ldr	r3, [pc, #160]	; (80020c4 <UART_SetConfig+0x2ac>)
 8002022:	61bb      	str	r3, [r7, #24]
        break;
 8002024:	e00f      	b.n	8002046 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002026:	f7ff fa01 	bl	800142c <HAL_RCC_GetSysClockFreq>
 800202a:	0003      	movs	r3, r0
 800202c:	61bb      	str	r3, [r7, #24]
        break;
 800202e:	e00a      	b.n	8002046 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002030:	2380      	movs	r3, #128	; 0x80
 8002032:	021b      	lsls	r3, r3, #8
 8002034:	61bb      	str	r3, [r7, #24]
        break;
 8002036:	e006      	b.n	8002046 <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800203c:	231e      	movs	r3, #30
 800203e:	18fb      	adds	r3, r7, r3
 8002040:	2201      	movs	r2, #1
 8002042:	701a      	strb	r2, [r3, #0]
        break;
 8002044:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d01e      	beq.n	800208a <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	085a      	lsrs	r2, r3, #1
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	18d2      	adds	r2, r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	0019      	movs	r1, r3
 800205c:	0010      	movs	r0, r2
 800205e:	f7fe f853 	bl	8000108 <__udivsi3>
 8002062:	0003      	movs	r3, r0
 8002064:	b29b      	uxth	r3, r3
 8002066:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	2b0f      	cmp	r3, #15
 800206c:	d909      	bls.n	8002082 <UART_SetConfig+0x26a>
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	2380      	movs	r3, #128	; 0x80
 8002072:	025b      	lsls	r3, r3, #9
 8002074:	429a      	cmp	r2, r3
 8002076:	d204      	bcs.n	8002082 <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	60da      	str	r2, [r3, #12]
 8002080:	e003      	b.n	800208a <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8002082:	231e      	movs	r3, #30
 8002084:	18fb      	adds	r3, r7, r3
 8002086:	2201      	movs	r2, #1
 8002088:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002096:	231e      	movs	r3, #30
 8002098:	18fb      	adds	r3, r7, r3
 800209a:	781b      	ldrb	r3, [r3, #0]
}
 800209c:	0018      	movs	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	b008      	add	sp, #32
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	efff69f3 	.word	0xefff69f3
 80020a8:	ffffcfff 	.word	0xffffcfff
 80020ac:	fffff4ff 	.word	0xfffff4ff
 80020b0:	40013800 	.word	0x40013800
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40004400 	.word	0x40004400
 80020bc:	40004800 	.word	0x40004800
 80020c0:	40004c00 	.word	0x40004c00
 80020c4:	007a1200 	.word	0x007a1200

080020c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	2201      	movs	r2, #1
 80020d6:	4013      	ands	r3, r2
 80020d8:	d00b      	beq.n	80020f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	4a4a      	ldr	r2, [pc, #296]	; (800220c <UART_AdvFeatureConfig+0x144>)
 80020e2:	4013      	ands	r3, r2
 80020e4:	0019      	movs	r1, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f6:	2202      	movs	r2, #2
 80020f8:	4013      	ands	r3, r2
 80020fa:	d00b      	beq.n	8002114 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	4a43      	ldr	r2, [pc, #268]	; (8002210 <UART_AdvFeatureConfig+0x148>)
 8002104:	4013      	ands	r3, r2
 8002106:	0019      	movs	r1, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	430a      	orrs	r2, r1
 8002112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002118:	2204      	movs	r2, #4
 800211a:	4013      	ands	r3, r2
 800211c:	d00b      	beq.n	8002136 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	4a3b      	ldr	r2, [pc, #236]	; (8002214 <UART_AdvFeatureConfig+0x14c>)
 8002126:	4013      	ands	r3, r2
 8002128:	0019      	movs	r1, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	430a      	orrs	r2, r1
 8002134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	2208      	movs	r2, #8
 800213c:	4013      	ands	r3, r2
 800213e:	d00b      	beq.n	8002158 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	4a34      	ldr	r2, [pc, #208]	; (8002218 <UART_AdvFeatureConfig+0x150>)
 8002148:	4013      	ands	r3, r2
 800214a:	0019      	movs	r1, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	430a      	orrs	r2, r1
 8002156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	2210      	movs	r2, #16
 800215e:	4013      	ands	r3, r2
 8002160:	d00b      	beq.n	800217a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	4a2c      	ldr	r2, [pc, #176]	; (800221c <UART_AdvFeatureConfig+0x154>)
 800216a:	4013      	ands	r3, r2
 800216c:	0019      	movs	r1, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	2220      	movs	r2, #32
 8002180:	4013      	ands	r3, r2
 8002182:	d00b      	beq.n	800219c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	4a25      	ldr	r2, [pc, #148]	; (8002220 <UART_AdvFeatureConfig+0x158>)
 800218c:	4013      	ands	r3, r2
 800218e:	0019      	movs	r1, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	2240      	movs	r2, #64	; 0x40
 80021a2:	4013      	ands	r3, r2
 80021a4:	d01d      	beq.n	80021e2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	4a1d      	ldr	r2, [pc, #116]	; (8002224 <UART_AdvFeatureConfig+0x15c>)
 80021ae:	4013      	ands	r3, r2
 80021b0:	0019      	movs	r1, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021c2:	2380      	movs	r3, #128	; 0x80
 80021c4:	035b      	lsls	r3, r3, #13
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d10b      	bne.n	80021e2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	4a15      	ldr	r2, [pc, #84]	; (8002228 <UART_AdvFeatureConfig+0x160>)
 80021d2:	4013      	ands	r3, r2
 80021d4:	0019      	movs	r1, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	2280      	movs	r2, #128	; 0x80
 80021e8:	4013      	ands	r3, r2
 80021ea:	d00b      	beq.n	8002204 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	4a0e      	ldr	r2, [pc, #56]	; (800222c <UART_AdvFeatureConfig+0x164>)
 80021f4:	4013      	ands	r3, r2
 80021f6:	0019      	movs	r1, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	430a      	orrs	r2, r1
 8002202:	605a      	str	r2, [r3, #4]
  }
}
 8002204:	46c0      	nop			; (mov r8, r8)
 8002206:	46bd      	mov	sp, r7
 8002208:	b002      	add	sp, #8
 800220a:	bd80      	pop	{r7, pc}
 800220c:	fffdffff 	.word	0xfffdffff
 8002210:	fffeffff 	.word	0xfffeffff
 8002214:	fffbffff 	.word	0xfffbffff
 8002218:	ffff7fff 	.word	0xffff7fff
 800221c:	ffffefff 	.word	0xffffefff
 8002220:	ffffdfff 	.word	0xffffdfff
 8002224:	ffefffff 	.word	0xffefffff
 8002228:	ff9fffff 	.word	0xff9fffff
 800222c:	fff7ffff 	.word	0xfff7ffff

08002230 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af02      	add	r7, sp, #8
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2280      	movs	r2, #128	; 0x80
 800223c:	2100      	movs	r1, #0
 800223e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002240:	f7fe fa32 	bl	80006a8 <HAL_GetTick>
 8002244:	0003      	movs	r3, r0
 8002246:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2208      	movs	r2, #8
 8002250:	4013      	ands	r3, r2
 8002252:	2b08      	cmp	r3, #8
 8002254:	d10c      	bne.n	8002270 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2280      	movs	r2, #128	; 0x80
 800225a:	0391      	lsls	r1, r2, #14
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	4a17      	ldr	r2, [pc, #92]	; (80022bc <UART_CheckIdleState+0x8c>)
 8002260:	9200      	str	r2, [sp, #0]
 8002262:	2200      	movs	r2, #0
 8002264:	f000 f82c 	bl	80022c0 <UART_WaitOnFlagUntilTimeout>
 8002268:	1e03      	subs	r3, r0, #0
 800226a:	d001      	beq.n	8002270 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e021      	b.n	80022b4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2204      	movs	r2, #4
 8002278:	4013      	ands	r3, r2
 800227a:	2b04      	cmp	r3, #4
 800227c:	d10c      	bne.n	8002298 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2280      	movs	r2, #128	; 0x80
 8002282:	03d1      	lsls	r1, r2, #15
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	4a0d      	ldr	r2, [pc, #52]	; (80022bc <UART_CheckIdleState+0x8c>)
 8002288:	9200      	str	r2, [sp, #0]
 800228a:	2200      	movs	r2, #0
 800228c:	f000 f818 	bl	80022c0 <UART_WaitOnFlagUntilTimeout>
 8002290:	1e03      	subs	r3, r0, #0
 8002292:	d001      	beq.n	8002298 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e00d      	b.n	80022b4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2220      	movs	r2, #32
 800229c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2220      	movs	r2, #32
 80022a2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2274      	movs	r2, #116	; 0x74
 80022ae:	2100      	movs	r1, #0
 80022b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	0018      	movs	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	b004      	add	sp, #16
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	01ffffff 	.word	0x01ffffff

080022c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b094      	sub	sp, #80	; 0x50
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	603b      	str	r3, [r7, #0]
 80022cc:	1dfb      	adds	r3, r7, #7
 80022ce:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022d0:	e0a3      	b.n	800241a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022d4:	3301      	adds	r3, #1
 80022d6:	d100      	bne.n	80022da <UART_WaitOnFlagUntilTimeout+0x1a>
 80022d8:	e09f      	b.n	800241a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022da:	f7fe f9e5 	bl	80006a8 <HAL_GetTick>
 80022de:	0002      	movs	r2, r0
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d302      	bcc.n	80022f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80022ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d13d      	bne.n	800236c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022f0:	f3ef 8310 	mrs	r3, PRIMASK
 80022f4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80022f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022f8:	647b      	str	r3, [r7, #68]	; 0x44
 80022fa:	2301      	movs	r3, #1
 80022fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002300:	f383 8810 	msr	PRIMASK, r3
}
 8002304:	46c0      	nop			; (mov r8, r8)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	494c      	ldr	r1, [pc, #304]	; (8002444 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002312:	400a      	ands	r2, r1
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002318:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800231a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231c:	f383 8810 	msr	PRIMASK, r3
}
 8002320:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002322:	f3ef 8310 	mrs	r3, PRIMASK
 8002326:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800232a:	643b      	str	r3, [r7, #64]	; 0x40
 800232c:	2301      	movs	r3, #1
 800232e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002332:	f383 8810 	msr	PRIMASK, r3
}
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2101      	movs	r1, #1
 8002344:	438a      	bics	r2, r1
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800234a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800234c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800234e:	f383 8810 	msr	PRIMASK, r3
}
 8002352:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2220      	movs	r2, #32
 8002358:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2220      	movs	r2, #32
 800235e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2274      	movs	r2, #116	; 0x74
 8002364:	2100      	movs	r1, #0
 8002366:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e067      	b.n	800243c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2204      	movs	r2, #4
 8002374:	4013      	ands	r3, r2
 8002376:	d050      	beq.n	800241a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	69da      	ldr	r2, [r3, #28]
 800237e:	2380      	movs	r3, #128	; 0x80
 8002380:	011b      	lsls	r3, r3, #4
 8002382:	401a      	ands	r2, r3
 8002384:	2380      	movs	r3, #128	; 0x80
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	429a      	cmp	r2, r3
 800238a:	d146      	bne.n	800241a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2280      	movs	r2, #128	; 0x80
 8002392:	0112      	lsls	r2, r2, #4
 8002394:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002396:	f3ef 8310 	mrs	r3, PRIMASK
 800239a:	613b      	str	r3, [r7, #16]
  return(result);
 800239c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800239e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023a0:	2301      	movs	r3, #1
 80023a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	f383 8810 	msr	PRIMASK, r3
}
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4923      	ldr	r1, [pc, #140]	; (8002444 <UART_WaitOnFlagUntilTimeout+0x184>)
 80023b8:	400a      	ands	r2, r1
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023be:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	f383 8810 	msr	PRIMASK, r3
}
 80023c6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023c8:	f3ef 8310 	mrs	r3, PRIMASK
 80023cc:	61fb      	str	r3, [r7, #28]
  return(result);
 80023ce:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80023d2:	2301      	movs	r3, #1
 80023d4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023d6:	6a3b      	ldr	r3, [r7, #32]
 80023d8:	f383 8810 	msr	PRIMASK, r3
}
 80023dc:	46c0      	nop			; (mov r8, r8)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2101      	movs	r1, #1
 80023ea:	438a      	bics	r2, r1
 80023ec:	609a      	str	r2, [r3, #8]
 80023ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	f383 8810 	msr	PRIMASK, r3
}
 80023f8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2220      	movs	r2, #32
 80023fe:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2220      	movs	r2, #32
 8002404:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2280      	movs	r2, #128	; 0x80
 800240a:	2120      	movs	r1, #32
 800240c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2274      	movs	r2, #116	; 0x74
 8002412:	2100      	movs	r1, #0
 8002414:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e010      	b.n	800243c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	4013      	ands	r3, r2
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	425a      	negs	r2, r3
 800242a:	4153      	adcs	r3, r2
 800242c:	b2db      	uxtb	r3, r3
 800242e:	001a      	movs	r2, r3
 8002430:	1dfb      	adds	r3, r7, #7
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d100      	bne.n	800243a <UART_WaitOnFlagUntilTimeout+0x17a>
 8002438:	e74b      	b.n	80022d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	0018      	movs	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	b014      	add	sp, #80	; 0x50
 8002442:	bd80      	pop	{r7, pc}
 8002444:	fffffe5f 	.word	0xfffffe5f

08002448 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08c      	sub	sp, #48	; 0x30
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	1dbb      	adds	r3, r7, #6
 8002454:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	1dba      	adds	r2, r7, #6
 8002460:	2158      	movs	r1, #88	; 0x58
 8002462:	8812      	ldrh	r2, [r2, #0]
 8002464:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	1dba      	adds	r2, r7, #6
 800246a:	215a      	movs	r1, #90	; 0x5a
 800246c:	8812      	ldrh	r2, [r2, #0]
 800246e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	2380      	movs	r3, #128	; 0x80
 800247c:	015b      	lsls	r3, r3, #5
 800247e:	429a      	cmp	r2, r3
 8002480:	d10d      	bne.n	800249e <UART_Start_Receive_IT+0x56>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d104      	bne.n	8002494 <UART_Start_Receive_IT+0x4c>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	225c      	movs	r2, #92	; 0x5c
 800248e:	4943      	ldr	r1, [pc, #268]	; (800259c <UART_Start_Receive_IT+0x154>)
 8002490:	5299      	strh	r1, [r3, r2]
 8002492:	e02e      	b.n	80024f2 <UART_Start_Receive_IT+0xaa>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	225c      	movs	r2, #92	; 0x5c
 8002498:	21ff      	movs	r1, #255	; 0xff
 800249a:	5299      	strh	r1, [r3, r2]
 800249c:	e029      	b.n	80024f2 <UART_Start_Receive_IT+0xaa>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10d      	bne.n	80024c2 <UART_Start_Receive_IT+0x7a>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d104      	bne.n	80024b8 <UART_Start_Receive_IT+0x70>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	225c      	movs	r2, #92	; 0x5c
 80024b2:	21ff      	movs	r1, #255	; 0xff
 80024b4:	5299      	strh	r1, [r3, r2]
 80024b6:	e01c      	b.n	80024f2 <UART_Start_Receive_IT+0xaa>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	225c      	movs	r2, #92	; 0x5c
 80024bc:	217f      	movs	r1, #127	; 0x7f
 80024be:	5299      	strh	r1, [r3, r2]
 80024c0:	e017      	b.n	80024f2 <UART_Start_Receive_IT+0xaa>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	2380      	movs	r3, #128	; 0x80
 80024c8:	055b      	lsls	r3, r3, #21
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d10d      	bne.n	80024ea <UART_Start_Receive_IT+0xa2>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d104      	bne.n	80024e0 <UART_Start_Receive_IT+0x98>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	225c      	movs	r2, #92	; 0x5c
 80024da:	217f      	movs	r1, #127	; 0x7f
 80024dc:	5299      	strh	r1, [r3, r2]
 80024de:	e008      	b.n	80024f2 <UART_Start_Receive_IT+0xaa>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	225c      	movs	r2, #92	; 0x5c
 80024e4:	213f      	movs	r1, #63	; 0x3f
 80024e6:	5299      	strh	r1, [r3, r2]
 80024e8:	e003      	b.n	80024f2 <UART_Start_Receive_IT+0xaa>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	225c      	movs	r2, #92	; 0x5c
 80024ee:	2100      	movs	r1, #0
 80024f0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2280      	movs	r2, #128	; 0x80
 80024f6:	2100      	movs	r1, #0
 80024f8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2222      	movs	r2, #34	; 0x22
 80024fe:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002500:	f3ef 8310 	mrs	r3, PRIMASK
 8002504:	61fb      	str	r3, [r7, #28]
  return(result);
 8002506:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002508:	62fb      	str	r3, [r7, #44]	; 0x2c
 800250a:	2301      	movs	r3, #1
 800250c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800250e:	6a3b      	ldr	r3, [r7, #32]
 8002510:	f383 8810 	msr	PRIMASK, r3
}
 8002514:	46c0      	nop			; (mov r8, r8)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2101      	movs	r1, #1
 8002522:	430a      	orrs	r2, r1
 8002524:	609a      	str	r2, [r3, #8]
 8002526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	f383 8810 	msr	PRIMASK, r3
}
 8002530:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	2380      	movs	r3, #128	; 0x80
 8002538:	015b      	lsls	r3, r3, #5
 800253a:	429a      	cmp	r2, r3
 800253c:	d107      	bne.n	800254e <UART_Start_Receive_IT+0x106>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d103      	bne.n	800254e <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	4a15      	ldr	r2, [pc, #84]	; (80025a0 <UART_Start_Receive_IT+0x158>)
 800254a:	665a      	str	r2, [r3, #100]	; 0x64
 800254c:	e002      	b.n	8002554 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	4a14      	ldr	r2, [pc, #80]	; (80025a4 <UART_Start_Receive_IT+0x15c>)
 8002552:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2274      	movs	r2, #116	; 0x74
 8002558:	2100      	movs	r1, #0
 800255a:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800255c:	f3ef 8310 	mrs	r3, PRIMASK
 8002560:	613b      	str	r3, [r7, #16]
  return(result);
 8002562:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002564:	62bb      	str	r3, [r7, #40]	; 0x28
 8002566:	2301      	movs	r3, #1
 8002568:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	f383 8810 	msr	PRIMASK, r3
}
 8002570:	46c0      	nop			; (mov r8, r8)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2190      	movs	r1, #144	; 0x90
 800257e:	0049      	lsls	r1, r1, #1
 8002580:	430a      	orrs	r2, r1
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002586:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	f383 8810 	msr	PRIMASK, r3
}
 800258e:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	0018      	movs	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	b00c      	add	sp, #48	; 0x30
 8002598:	bd80      	pop	{r7, pc}
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	000001ff 	.word	0x000001ff
 80025a0:	08002859 	.word	0x08002859
 80025a4:	080026f1 	.word	0x080026f1

080025a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08e      	sub	sp, #56	; 0x38
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025b0:	f3ef 8310 	mrs	r3, PRIMASK
 80025b4:	617b      	str	r3, [r7, #20]
  return(result);
 80025b6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025b8:	637b      	str	r3, [r7, #52]	; 0x34
 80025ba:	2301      	movs	r3, #1
 80025bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	f383 8810 	msr	PRIMASK, r3
}
 80025c4:	46c0      	nop			; (mov r8, r8)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4925      	ldr	r1, [pc, #148]	; (8002668 <UART_EndRxTransfer+0xc0>)
 80025d2:	400a      	ands	r2, r1
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	f383 8810 	msr	PRIMASK, r3
}
 80025e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025e2:	f3ef 8310 	mrs	r3, PRIMASK
 80025e6:	623b      	str	r3, [r7, #32]
  return(result);
 80025e8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025ea:	633b      	str	r3, [r7, #48]	; 0x30
 80025ec:	2301      	movs	r3, #1
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	f383 8810 	msr	PRIMASK, r3
}
 80025f6:	46c0      	nop			; (mov r8, r8)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2101      	movs	r1, #1
 8002604:	438a      	bics	r2, r1
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800260c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260e:	f383 8810 	msr	PRIMASK, r3
}
 8002612:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002618:	2b01      	cmp	r3, #1
 800261a:	d118      	bne.n	800264e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800261c:	f3ef 8310 	mrs	r3, PRIMASK
 8002620:	60bb      	str	r3, [r7, #8]
  return(result);
 8002622:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002626:	2301      	movs	r3, #1
 8002628:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f383 8810 	msr	PRIMASK, r3
}
 8002630:	46c0      	nop			; (mov r8, r8)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2110      	movs	r1, #16
 800263e:	438a      	bics	r2, r1
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002644:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	f383 8810 	msr	PRIMASK, r3
}
 800264c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2220      	movs	r2, #32
 8002652:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002660:	46c0      	nop			; (mov r8, r8)
 8002662:	46bd      	mov	sp, r7
 8002664:	b00e      	add	sp, #56	; 0x38
 8002666:	bd80      	pop	{r7, pc}
 8002668:	fffffedf 	.word	0xfffffedf

0800266c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	225a      	movs	r2, #90	; 0x5a
 800267e:	2100      	movs	r1, #0
 8002680:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2252      	movs	r2, #82	; 0x52
 8002686:	2100      	movs	r1, #0
 8002688:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	0018      	movs	r0, r3
 800268e:	f7ff fbaf 	bl	8001df0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	46bd      	mov	sp, r7
 8002696:	b004      	add	sp, #16
 8002698:	bd80      	pop	{r7, pc}

0800269a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b086      	sub	sp, #24
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026a2:	f3ef 8310 	mrs	r3, PRIMASK
 80026a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80026a8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	2301      	movs	r3, #1
 80026ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f383 8810 	msr	PRIMASK, r3
}
 80026b6:	46c0      	nop			; (mov r8, r8)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2140      	movs	r1, #64	; 0x40
 80026c4:	438a      	bics	r2, r1
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	f383 8810 	msr	PRIMASK, r3
}
 80026d2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2220      	movs	r2, #32
 80026d8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	0018      	movs	r0, r3
 80026e4:	f7ff fb7c 	bl	8001de0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80026e8:	46c0      	nop			; (mov r8, r8)
 80026ea:	46bd      	mov	sp, r7
 80026ec:	b006      	add	sp, #24
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b090      	sub	sp, #64	; 0x40
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80026f8:	203e      	movs	r0, #62	; 0x3e
 80026fa:	183b      	adds	r3, r7, r0
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	215c      	movs	r1, #92	; 0x5c
 8002700:	5a52      	ldrh	r2, [r2, r1]
 8002702:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002708:	2b22      	cmp	r3, #34	; 0x22
 800270a:	d000      	beq.n	800270e <UART_RxISR_8BIT+0x1e>
 800270c:	e095      	b.n	800283a <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	213c      	movs	r1, #60	; 0x3c
 8002714:	187b      	adds	r3, r7, r1
 8002716:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002718:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800271a:	187b      	adds	r3, r7, r1
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	b2da      	uxtb	r2, r3
 8002720:	183b      	adds	r3, r7, r0
 8002722:	881b      	ldrh	r3, [r3, #0]
 8002724:	b2d9      	uxtb	r1, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272a:	400a      	ands	r2, r1
 800272c:	b2d2      	uxtb	r2, r2
 800272e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002734:	1c5a      	adds	r2, r3, #1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	225a      	movs	r2, #90	; 0x5a
 800273e:	5a9b      	ldrh	r3, [r3, r2]
 8002740:	b29b      	uxth	r3, r3
 8002742:	3b01      	subs	r3, #1
 8002744:	b299      	uxth	r1, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	225a      	movs	r2, #90	; 0x5a
 800274a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	225a      	movs	r2, #90	; 0x5a
 8002750:	5a9b      	ldrh	r3, [r3, r2]
 8002752:	b29b      	uxth	r3, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	d178      	bne.n	800284a <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002758:	f3ef 8310 	mrs	r3, PRIMASK
 800275c:	61bb      	str	r3, [r7, #24]
  return(result);
 800275e:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002760:	63bb      	str	r3, [r7, #56]	; 0x38
 8002762:	2301      	movs	r3, #1
 8002764:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	f383 8810 	msr	PRIMASK, r3
}
 800276c:	46c0      	nop			; (mov r8, r8)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4936      	ldr	r1, [pc, #216]	; (8002854 <UART_RxISR_8BIT+0x164>)
 800277a:	400a      	ands	r2, r1
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002780:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	f383 8810 	msr	PRIMASK, r3
}
 8002788:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800278a:	f3ef 8310 	mrs	r3, PRIMASK
 800278e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002792:	637b      	str	r3, [r7, #52]	; 0x34
 8002794:	2301      	movs	r3, #1
 8002796:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279a:	f383 8810 	msr	PRIMASK, r3
}
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2101      	movs	r1, #1
 80027ac:	438a      	bics	r2, r1
 80027ae:	609a      	str	r2, [r3, #8]
 80027b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b6:	f383 8810 	msr	PRIMASK, r3
}
 80027ba:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2220      	movs	r2, #32
 80027c0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d12f      	bne.n	8002830 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027d6:	f3ef 8310 	mrs	r3, PRIMASK
 80027da:	60fb      	str	r3, [r7, #12]
  return(result);
 80027dc:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027de:	633b      	str	r3, [r7, #48]	; 0x30
 80027e0:	2301      	movs	r3, #1
 80027e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	f383 8810 	msr	PRIMASK, r3
}
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2110      	movs	r1, #16
 80027f8:	438a      	bics	r2, r1
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f383 8810 	msr	PRIMASK, r3
}
 8002806:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	2210      	movs	r2, #16
 8002810:	4013      	ands	r3, r2
 8002812:	2b10      	cmp	r3, #16
 8002814:	d103      	bne.n	800281e <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2210      	movs	r2, #16
 800281c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2258      	movs	r2, #88	; 0x58
 8002822:	5a9a      	ldrh	r2, [r3, r2]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	0011      	movs	r1, r2
 8002828:	0018      	movs	r0, r3
 800282a:	f7ff fae9 	bl	8001e00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800282e:	e00c      	b.n	800284a <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	0018      	movs	r0, r3
 8002834:	f7fd fd2a 	bl	800028c <HAL_UART_RxCpltCallback>
}
 8002838:	e007      	b.n	800284a <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	699a      	ldr	r2, [r3, #24]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2108      	movs	r1, #8
 8002846:	430a      	orrs	r2, r1
 8002848:	619a      	str	r2, [r3, #24]
}
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	46bd      	mov	sp, r7
 800284e:	b010      	add	sp, #64	; 0x40
 8002850:	bd80      	pop	{r7, pc}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	fffffedf 	.word	0xfffffedf

08002858 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b090      	sub	sp, #64	; 0x40
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002860:	203e      	movs	r0, #62	; 0x3e
 8002862:	183b      	adds	r3, r7, r0
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	215c      	movs	r1, #92	; 0x5c
 8002868:	5a52      	ldrh	r2, [r2, r1]
 800286a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002870:	2b22      	cmp	r3, #34	; 0x22
 8002872:	d000      	beq.n	8002876 <UART_RxISR_16BIT+0x1e>
 8002874:	e095      	b.n	80029a2 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	213c      	movs	r1, #60	; 0x3c
 800287c:	187b      	adds	r3, r7, r1
 800287e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002880:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002886:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8002888:	187b      	adds	r3, r7, r1
 800288a:	183a      	adds	r2, r7, r0
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	8812      	ldrh	r2, [r2, #0]
 8002890:	4013      	ands	r3, r2
 8002892:	b29a      	uxth	r2, r3
 8002894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002896:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289c:	1c9a      	adds	r2, r3, #2
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	225a      	movs	r2, #90	; 0x5a
 80028a6:	5a9b      	ldrh	r3, [r3, r2]
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b299      	uxth	r1, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	225a      	movs	r2, #90	; 0x5a
 80028b2:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	225a      	movs	r2, #90	; 0x5a
 80028b8:	5a9b      	ldrh	r3, [r3, r2]
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d178      	bne.n	80029b2 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028c0:	f3ef 8310 	mrs	r3, PRIMASK
 80028c4:	617b      	str	r3, [r7, #20]
  return(result);
 80028c6:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028c8:	637b      	str	r3, [r7, #52]	; 0x34
 80028ca:	2301      	movs	r3, #1
 80028cc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	f383 8810 	msr	PRIMASK, r3
}
 80028d4:	46c0      	nop			; (mov r8, r8)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4936      	ldr	r1, [pc, #216]	; (80029bc <UART_RxISR_16BIT+0x164>)
 80028e2:	400a      	ands	r2, r1
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	f383 8810 	msr	PRIMASK, r3
}
 80028f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028f2:	f3ef 8310 	mrs	r3, PRIMASK
 80028f6:	623b      	str	r3, [r7, #32]
  return(result);
 80028f8:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028fa:	633b      	str	r3, [r7, #48]	; 0x30
 80028fc:	2301      	movs	r3, #1
 80028fe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	f383 8810 	msr	PRIMASK, r3
}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689a      	ldr	r2, [r3, #8]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2101      	movs	r1, #1
 8002914:	438a      	bics	r2, r1
 8002916:	609a      	str	r2, [r3, #8]
 8002918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800291c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291e:	f383 8810 	msr	PRIMASK, r3
}
 8002922:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2220      	movs	r2, #32
 8002928:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002934:	2b01      	cmp	r3, #1
 8002936:	d12f      	bne.n	8002998 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800293e:	f3ef 8310 	mrs	r3, PRIMASK
 8002942:	60bb      	str	r3, [r7, #8]
  return(result);
 8002944:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002946:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002948:	2301      	movs	r3, #1
 800294a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f383 8810 	msr	PRIMASK, r3
}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2110      	movs	r1, #16
 8002960:	438a      	bics	r2, r1
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002966:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	f383 8810 	msr	PRIMASK, r3
}
 800296e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	2210      	movs	r2, #16
 8002978:	4013      	ands	r3, r2
 800297a:	2b10      	cmp	r3, #16
 800297c:	d103      	bne.n	8002986 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2210      	movs	r2, #16
 8002984:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2258      	movs	r2, #88	; 0x58
 800298a:	5a9a      	ldrh	r2, [r3, r2]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	0011      	movs	r1, r2
 8002990:	0018      	movs	r0, r3
 8002992:	f7ff fa35 	bl	8001e00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002996:	e00c      	b.n	80029b2 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	0018      	movs	r0, r3
 800299c:	f7fd fc76 	bl	800028c <HAL_UART_RxCpltCallback>
}
 80029a0:	e007      	b.n	80029b2 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	699a      	ldr	r2, [r3, #24]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2108      	movs	r1, #8
 80029ae:	430a      	orrs	r2, r1
 80029b0:	619a      	str	r2, [r3, #24]
}
 80029b2:	46c0      	nop			; (mov r8, r8)
 80029b4:	46bd      	mov	sp, r7
 80029b6:	b010      	add	sp, #64	; 0x40
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	46c0      	nop			; (mov r8, r8)
 80029bc:	fffffedf 	.word	0xfffffedf

080029c0 <__libc_init_array>:
 80029c0:	b570      	push	{r4, r5, r6, lr}
 80029c2:	2600      	movs	r6, #0
 80029c4:	4d0c      	ldr	r5, [pc, #48]	; (80029f8 <__libc_init_array+0x38>)
 80029c6:	4c0d      	ldr	r4, [pc, #52]	; (80029fc <__libc_init_array+0x3c>)
 80029c8:	1b64      	subs	r4, r4, r5
 80029ca:	10a4      	asrs	r4, r4, #2
 80029cc:	42a6      	cmp	r6, r4
 80029ce:	d109      	bne.n	80029e4 <__libc_init_array+0x24>
 80029d0:	2600      	movs	r6, #0
 80029d2:	f000 f821 	bl	8002a18 <_init>
 80029d6:	4d0a      	ldr	r5, [pc, #40]	; (8002a00 <__libc_init_array+0x40>)
 80029d8:	4c0a      	ldr	r4, [pc, #40]	; (8002a04 <__libc_init_array+0x44>)
 80029da:	1b64      	subs	r4, r4, r5
 80029dc:	10a4      	asrs	r4, r4, #2
 80029de:	42a6      	cmp	r6, r4
 80029e0:	d105      	bne.n	80029ee <__libc_init_array+0x2e>
 80029e2:	bd70      	pop	{r4, r5, r6, pc}
 80029e4:	00b3      	lsls	r3, r6, #2
 80029e6:	58eb      	ldr	r3, [r5, r3]
 80029e8:	4798      	blx	r3
 80029ea:	3601      	adds	r6, #1
 80029ec:	e7ee      	b.n	80029cc <__libc_init_array+0xc>
 80029ee:	00b3      	lsls	r3, r6, #2
 80029f0:	58eb      	ldr	r3, [r5, r3]
 80029f2:	4798      	blx	r3
 80029f4:	3601      	adds	r6, #1
 80029f6:	e7f2      	b.n	80029de <__libc_init_array+0x1e>
 80029f8:	08002a68 	.word	0x08002a68
 80029fc:	08002a68 	.word	0x08002a68
 8002a00:	08002a68 	.word	0x08002a68
 8002a04:	08002a6c 	.word	0x08002a6c

08002a08 <memset>:
 8002a08:	0003      	movs	r3, r0
 8002a0a:	1882      	adds	r2, r0, r2
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d100      	bne.n	8002a12 <memset+0xa>
 8002a10:	4770      	bx	lr
 8002a12:	7019      	strb	r1, [r3, #0]
 8002a14:	3301      	adds	r3, #1
 8002a16:	e7f9      	b.n	8002a0c <memset+0x4>

08002a18 <_init>:
 8002a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a1e:	bc08      	pop	{r3}
 8002a20:	469e      	mov	lr, r3
 8002a22:	4770      	bx	lr

08002a24 <_fini>:
 8002a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a2a:	bc08      	pop	{r3}
 8002a2c:	469e      	mov	lr, r3
 8002a2e:	4770      	bx	lr
